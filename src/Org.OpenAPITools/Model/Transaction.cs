/* 
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 6.6.0.20190507.002
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Common object for transaction.
    /// </summary>
    [DataContract]
    public partial class Transaction :  IEquatable<Transaction>, IValidatableObject
    {
        /// <summary>
        /// The state of the transaction.
        /// </summary>
        /// <value>The state of the transaction.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TransactionStateEnum
        {
            /// <summary>
            /// Enum AUTHORIZED for value: AUTHORIZED
            /// </summary>
            [EnumMember(Value = "AUTHORIZED")]
            AUTHORIZED = 1,

            /// <summary>
            /// Enum CAPTURED for value: CAPTURED
            /// </summary>
            [EnumMember(Value = "CAPTURED")]
            CAPTURED = 2,

            /// <summary>
            /// Enum COMPLETEDGET for value: COMPLETED_GET
            /// </summary>
            [EnumMember(Value = "COMPLETED_GET")]
            COMPLETEDGET = 3,

            /// <summary>
            /// Enum DECLINED for value: DECLINED
            /// </summary>
            [EnumMember(Value = "DECLINED")]
            DECLINED = 4,

            /// <summary>
            /// Enum CHECKED for value: CHECKED
            /// </summary>
            [EnumMember(Value = "CHECKED")]
            CHECKED = 5,

            /// <summary>
            /// Enum INITIALIZED for value: INITIALIZED
            /// </summary>
            [EnumMember(Value = "INITIALIZED")]
            INITIALIZED = 6,

            /// <summary>
            /// Enum PENDINGAUTHORIZATION for value: PENDING_AUTHORIZATION
            /// </summary>
            [EnumMember(Value = "PENDING_AUTHORIZATION")]
            PENDINGAUTHORIZATION = 7,

            /// <summary>
            /// Enum PENDINGAUTOVOID for value: PENDING_AUTOVOID
            /// </summary>
            [EnumMember(Value = "PENDING_AUTOVOID")]
            PENDINGAUTOVOID = 8,

            /// <summary>
            /// Enum PENDINGCAPTURE for value: PENDING_CAPTURE
            /// </summary>
            [EnumMember(Value = "PENDING_CAPTURE")]
            PENDINGCAPTURE = 9,

            /// <summary>
            /// Enum PENDINGCREDIT for value: PENDING_CREDIT
            /// </summary>
            [EnumMember(Value = "PENDING_CREDIT")]
            PENDINGCREDIT = 10,

            /// <summary>
            /// Enum PENDINGGIROPAYINIT for value: PENDING_GIROPAY_INIT
            /// </summary>
            [EnumMember(Value = "PENDING_GIROPAY_INIT")]
            PENDINGGIROPAYINIT = 11,

            /// <summary>
            /// Enum PENDINGIDEALINIT for value: PENDING_IDEAL_INIT
            /// </summary>
            [EnumMember(Value = "PENDING_IDEAL_INIT")]
            PENDINGIDEALINIT = 12,

            /// <summary>
            /// Enum PENDINGINIT for value: PENDING_INIT
            /// </summary>
            [EnumMember(Value = "PENDING_INIT")]
            PENDINGINIT = 13,

            /// <summary>
            /// Enum PENDINGREADY for value: PENDING_READY
            /// </summary>
            [EnumMember(Value = "PENDING_READY")]
            PENDINGREADY = 14,

            /// <summary>
            /// Enum PENDINGRETURN for value: PENDING_RETURN
            /// </summary>
            [EnumMember(Value = "PENDING_RETURN")]
            PENDINGRETURN = 15,

            /// <summary>
            /// Enum PENDINGSETTLEMENT for value: PENDING_SETTLEMENT
            /// </summary>
            [EnumMember(Value = "PENDING_SETTLEMENT")]
            PENDINGSETTLEMENT = 16,

            /// <summary>
            /// Enum PENDINGSOFORTINIT for value: PENDING_SOFORT_INIT
            /// </summary>
            [EnumMember(Value = "PENDING_SOFORT_INIT")]
            PENDINGSOFORTINIT = 17,

            /// <summary>
            /// Enum PENDINGVOID for value: PENDING_VOID
            /// </summary>
            [EnumMember(Value = "PENDING_VOID")]
            PENDINGVOID = 18,

            /// <summary>
            /// Enum READY for value: READY
            /// </summary>
            [EnumMember(Value = "READY")]
            READY = 19,

            /// <summary>
            /// Enum SETTLED for value: SETTLED
            /// </summary>
            [EnumMember(Value = "SETTLED")]
            SETTLED = 20,

            /// <summary>
            /// Enum VOIDED for value: VOIDED
            /// </summary>
            [EnumMember(Value = "VOIDED")]
            VOIDED = 21,

            /// <summary>
            /// Enum WAITING for value: WAITING
            /// </summary>
            [EnumMember(Value = "WAITING")]
            WAITING = 22,

            /// <summary>
            /// Enum WAITINGAUTHENTICATION for value: WAITING_AUTHENTICATION
            /// </summary>
            [EnumMember(Value = "WAITING_AUTHENTICATION")]
            WAITINGAUTHENTICATION = 23,

            /// <summary>
            /// Enum WAITING3DSECURE for value: WAITING_3D_SECURE
            /// </summary>
            [EnumMember(Value = "WAITING_3D_SECURE")]
            WAITING3DSECURE = 24,

            /// <summary>
            /// Enum WAITINGCLICKANDBUY for value: WAITING_CLICK_AND_BUY
            /// </summary>
            [EnumMember(Value = "WAITING_CLICK_AND_BUY")]
            WAITINGCLICKANDBUY = 25,

            /// <summary>
            /// Enum WAITINGGIROPAY for value: WAITING_GIROPAY
            /// </summary>
            [EnumMember(Value = "WAITING_GIROPAY")]
            WAITINGGIROPAY = 26,

            /// <summary>
            /// Enum WAITINGIDEAL for value: WAITING_IDEAL
            /// </summary>
            [EnumMember(Value = "WAITING_IDEAL")]
            WAITINGIDEAL = 27,

            /// <summary>
            /// Enum WAITINGKLARNA for value: WAITING_KLARNA
            /// </summary>
            [EnumMember(Value = "WAITING_KLARNA")]
            WAITINGKLARNA = 28,

            /// <summary>
            /// Enum WAITINGPAYPAL for value: WAITING_PAYPAL
            /// </summary>
            [EnumMember(Value = "WAITING_PAYPAL")]
            WAITINGPAYPAL = 29,

            /// <summary>
            /// Enum WAITINGPAYPALEVENT for value: WAITING_PAYPAL_EVENT
            /// </summary>
            [EnumMember(Value = "WAITING_PAYPAL_EVENT")]
            WAITINGPAYPALEVENT = 30,

            /// <summary>
            /// Enum WAITINGPPROLONGWAITING for value: WAITING_PPRO_LONG_WAITING
            /// </summary>
            [EnumMember(Value = "WAITING_PPRO_LONG_WAITING")]
            WAITINGPPROLONGWAITING = 31,

            /// <summary>
            /// Enum WAITINGSOFORT for value: WAITING_SOFORT
            /// </summary>
            [EnumMember(Value = "WAITING_SOFORT")]
            WAITINGSOFORT = 32,

            /// <summary>
            /// Enum WAITINGTPAY for value: WAITING_T_PAY
            /// </summary>
            [EnumMember(Value = "WAITING_T_PAY")]
            WAITINGTPAY = 33,

            /// <summary>
            /// Enum WAITINGALIPAYPAYSECURE for value: WAITING_ALIPAY_PAYSECURE
            /// </summary>
            [EnumMember(Value = "WAITING_ALIPAY_PAYSECURE")]
            WAITINGALIPAYPAYSECURE = 34

        }

        /// <summary>
        /// The state of the transaction.
        /// </summary>
        /// <value>The state of the transaction.</value>
        [DataMember(Name="transactionState", EmitDefaultValue=false)]
        public TransactionStateEnum? TransactionState { get; set; }
        /// <summary>
        /// Gets or Sets TransactionType
        /// </summary>
        [DataMember(Name="transactionType", EmitDefaultValue=false)]
        public TransactionType? TransactionType { get; set; }
        /// <summary>
        /// The submission component.
        /// </summary>
        /// <value>The submission component.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SubmissionComponentEnum
        {
            /// <summary>
            /// Enum API for value: API
            /// </summary>
            [EnumMember(Value = "API")]
            API = 1,

            /// <summary>
            /// Enum BUS for value: BUS
            /// </summary>
            [EnumMember(Value = "BUS")]
            BUS = 2,

            /// <summary>
            /// Enum CONNECT for value: CONNECT
            /// </summary>
            [EnumMember(Value = "CONNECT")]
            CONNECT = 3,

            /// <summary>
            /// Enum CORE for value: CORE
            /// </summary>
            [EnumMember(Value = "CORE")]
            CORE = 4,

            /// <summary>
            /// Enum EPAS for value: EPAS
            /// </summary>
            [EnumMember(Value = "EPAS")]
            EPAS = 5,

            /// <summary>
            /// Enum MCS for value: MCS
            /// </summary>
            [EnumMember(Value = "MCS")]
            MCS = 6,

            /// <summary>
            /// Enum RESTAPI for value: RESTAPI
            /// </summary>
            [EnumMember(Value = "RESTAPI")]
            RESTAPI = 7,

            /// <summary>
            /// Enum SWITCH for value: SWITCH
            /// </summary>
            [EnumMember(Value = "SWITCH")]
            SWITCH = 8,

            /// <summary>
            /// Enum VT for value: VT
            /// </summary>
            [EnumMember(Value = "VT")]
            VT = 9

        }

        /// <summary>
        /// The submission component.
        /// </summary>
        /// <value>The submission component.</value>
        [DataMember(Name="submissionComponent", EmitDefaultValue=false)]
        public SubmissionComponentEnum? SubmissionComponent { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Transaction" /> class.
        /// </summary>
        /// <param name="transactionState">The state of the transaction..</param>
        /// <param name="ipgTransactionId">The transaction ID..</param>
        /// <param name="orderId">Client order ID if supplied by client..</param>
        /// <param name="transactionType">transactionType.</param>
        /// <param name="paymentMethodDetails">paymentMethodDetails.</param>
        /// <param name="transactionAmount">transactionAmount.</param>
        /// <param name="submissionComponent">The submission component..</param>
        /// <param name="payerSecurityLevel">The payer security level..</param>
        /// <param name="transactionTime">The transaction time in seconds since epoch..</param>
        /// <param name="storeId">Store ID number..</param>
        /// <param name="userId">The user ID..</param>
        /// <param name="processor">processor.</param>
        public Transaction(TransactionStateEnum? transactionState = default(TransactionStateEnum?), string ipgTransactionId = default(string), string orderId = default(string), TransactionType transactionType = default(TransactionType), PaymentMethodDetails paymentMethodDetails = default(PaymentMethodDetails), Amount transactionAmount = default(Amount), SubmissionComponentEnum? submissionComponent = default(SubmissionComponentEnum?), string payerSecurityLevel = default(string), long transactionTime = default(long), string storeId = default(string), string userId = default(string), ProcessorData processor = default(ProcessorData))
        {
            this.TransactionState = transactionState;
            this.IpgTransactionId = ipgTransactionId;
            this.OrderId = orderId;
            this.TransactionType = transactionType;
            this.PaymentMethodDetails = paymentMethodDetails;
            this.TransactionAmount = transactionAmount;
            this.SubmissionComponent = submissionComponent;
            this.PayerSecurityLevel = payerSecurityLevel;
            this.TransactionTime = transactionTime;
            this.StoreId = storeId;
            this.UserId = userId;
            this.Processor = processor;
        }
        
        /// <summary>
        /// The transaction ID.
        /// </summary>
        /// <value>The transaction ID.</value>
        [DataMember(Name="ipgTransactionId", EmitDefaultValue=false)]
        public string IpgTransactionId { get; set; }

        /// <summary>
        /// Client order ID if supplied by client.
        /// </summary>
        /// <value>Client order ID if supplied by client.</value>
        [DataMember(Name="orderId", EmitDefaultValue=false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethodDetails
        /// </summary>
        [DataMember(Name="paymentMethodDetails", EmitDefaultValue=false)]
        public PaymentMethodDetails PaymentMethodDetails { get; set; }

        /// <summary>
        /// Gets or Sets TransactionAmount
        /// </summary>
        [DataMember(Name="transactionAmount", EmitDefaultValue=false)]
        public Amount TransactionAmount { get; set; }

        /// <summary>
        /// The payer security level.
        /// </summary>
        /// <value>The payer security level.</value>
        [DataMember(Name="payerSecurityLevel", EmitDefaultValue=false)]
        public string PayerSecurityLevel { get; set; }

        /// <summary>
        /// The transaction time in seconds since epoch.
        /// </summary>
        /// <value>The transaction time in seconds since epoch.</value>
        [DataMember(Name="transactionTime", EmitDefaultValue=false)]
        public long TransactionTime { get; set; }

        /// <summary>
        /// Store ID number.
        /// </summary>
        /// <value>Store ID number.</value>
        [DataMember(Name="storeId", EmitDefaultValue=false)]
        public string StoreId { get; set; }

        /// <summary>
        /// The user ID.
        /// </summary>
        /// <value>The user ID.</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets Processor
        /// </summary>
        [DataMember(Name="processor", EmitDefaultValue=false)]
        public ProcessorData Processor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Transaction {\n");
            sb.Append("  TransactionState: ").Append(TransactionState).Append("\n");
            sb.Append("  IpgTransactionId: ").Append(IpgTransactionId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  PaymentMethodDetails: ").Append(PaymentMethodDetails).Append("\n");
            sb.Append("  TransactionAmount: ").Append(TransactionAmount).Append("\n");
            sb.Append("  SubmissionComponent: ").Append(SubmissionComponent).Append("\n");
            sb.Append("  PayerSecurityLevel: ").Append(PayerSecurityLevel).Append("\n");
            sb.Append("  TransactionTime: ").Append(TransactionTime).Append("\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Processor: ").Append(Processor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Transaction);
        }

        /// <summary>
        /// Returns true if Transaction instances are equal
        /// </summary>
        /// <param name="input">Instance of Transaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Transaction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TransactionState == input.TransactionState ||
                    this.TransactionState.Equals(input.TransactionState)
                ) && 
                (
                    this.IpgTransactionId == input.IpgTransactionId ||
                    (this.IpgTransactionId != null &&
                    this.IpgTransactionId.Equals(input.IpgTransactionId))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.TransactionType == input.TransactionType ||
                    this.TransactionType.Equals(input.TransactionType)
                ) && 
                (
                    this.PaymentMethodDetails == input.PaymentMethodDetails ||
                    (this.PaymentMethodDetails != null &&
                    this.PaymentMethodDetails.Equals(input.PaymentMethodDetails))
                ) && 
                (
                    this.TransactionAmount == input.TransactionAmount ||
                    (this.TransactionAmount != null &&
                    this.TransactionAmount.Equals(input.TransactionAmount))
                ) && 
                (
                    this.SubmissionComponent == input.SubmissionComponent ||
                    this.SubmissionComponent.Equals(input.SubmissionComponent)
                ) && 
                (
                    this.PayerSecurityLevel == input.PayerSecurityLevel ||
                    (this.PayerSecurityLevel != null &&
                    this.PayerSecurityLevel.Equals(input.PayerSecurityLevel))
                ) && 
                (
                    this.TransactionTime == input.TransactionTime ||
                    this.TransactionTime.Equals(input.TransactionTime)
                ) && 
                (
                    this.StoreId == input.StoreId ||
                    (this.StoreId != null &&
                    this.StoreId.Equals(input.StoreId))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.Processor == input.Processor ||
                    (this.Processor != null &&
                    this.Processor.Equals(input.Processor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.TransactionState.GetHashCode();
                if (this.IpgTransactionId != null)
                    hashCode = hashCode * 59 + this.IpgTransactionId.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                hashCode = hashCode * 59 + this.TransactionType.GetHashCode();
                if (this.PaymentMethodDetails != null)
                    hashCode = hashCode * 59 + this.PaymentMethodDetails.GetHashCode();
                if (this.TransactionAmount != null)
                    hashCode = hashCode * 59 + this.TransactionAmount.GetHashCode();
                hashCode = hashCode * 59 + this.SubmissionComponent.GetHashCode();
                if (this.PayerSecurityLevel != null)
                    hashCode = hashCode * 59 + this.PayerSecurityLevel.GetHashCode();
                hashCode = hashCode * 59 + this.TransactionTime.GetHashCode();
                if (this.StoreId != null)
                    hashCode = hashCode * 59 + this.StoreId.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.Processor != null)
                    hashCode = hashCode * 59 + this.Processor.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
