/* 
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 6.6.0.20190507.002
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Authentication redirect details.
    /// </summary>
    [DataContract]
    public partial class AuthenticationRedirect :  IEquatable<AuthenticationRedirect>, IValidatableObject
    {
        /// <summary>
        /// The type of authentication.
        /// </summary>
        /// <value>The type of authentication.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum SECURE3D for value: SECURE_3D
            /// </summary>
            [EnumMember(Value = "SECURE_3D")]
            SECURE3D = 1

        }

        /// <summary>
        /// The type of authentication.
        /// </summary>
        /// <value>The type of authentication.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationRedirect" /> class.
        /// </summary>
        /// <param name="type">The type of authentication..</param>
        /// <param name="targetUrl">The URL for the authentication redirect for the merchant..</param>
        /// <param name="_params">_params.</param>
        public AuthenticationRedirect(TypeEnum? type = default(TypeEnum?), string targetUrl = default(string), AuthenticationRedirectParams _params = default(AuthenticationRedirectParams))
        {
            this.Type = type;
            this.TargetUrl = targetUrl;
            this.Params = _params;
        }
        
        /// <summary>
        /// The URL for the authentication redirect for the merchant.
        /// </summary>
        /// <value>The URL for the authentication redirect for the merchant.</value>
        [DataMember(Name="targetUrl", EmitDefaultValue=false)]
        public string TargetUrl { get; set; }

        /// <summary>
        /// Gets or Sets Params
        /// </summary>
        [DataMember(Name="params", EmitDefaultValue=false)]
        public AuthenticationRedirectParams Params { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuthenticationRedirect {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TargetUrl: ").Append(TargetUrl).Append("\n");
            sb.Append("  Params: ").Append(Params).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthenticationRedirect);
        }

        /// <summary>
        /// Returns true if AuthenticationRedirect instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthenticationRedirect to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthenticationRedirect input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.TargetUrl == input.TargetUrl ||
                    (this.TargetUrl != null &&
                    this.TargetUrl.Equals(input.TargetUrl))
                ) && 
                (
                    this.Params == input.Params ||
                    (this.Params != null &&
                    this.Params.Equals(input.Params))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.TargetUrl != null)
                    hashCode = hashCode * 59 + this.TargetUrl.GetHashCode();
                if (this.Params != null)
                    hashCode = hashCode * 59 + this.Params.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
