/* 
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 6.10.1.20200226.002
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Object that holds information about items that should be blocked.
    /// </summary>
    [DataContract]
    public partial class BlockedItems :  IEquatable<BlockedItems>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BlockedItems" /> class.
        /// </summary>
        /// <param name="blockCard">blockCard.</param>
        /// <param name="blockDomain">blockDomain.</param>
        /// <param name="blockName">blockName.</param>
        /// <param name="blockIPAddress">blockIPAddress.</param>
        public BlockedItems(BlockCard blockCard = default(BlockCard), BlockDomain blockDomain = default(BlockDomain), BlockName blockName = default(BlockName), BlockIPAddress blockIPAddress = default(BlockIPAddress))
        {
            this.BlockCard = blockCard;
            this.BlockDomain = blockDomain;
            this.BlockName = blockName;
            this.BlockIPAddress = blockIPAddress;
        }
        
        /// <summary>
        /// Gets or Sets BlockCard
        /// </summary>
        [DataMember(Name="blockCard", EmitDefaultValue=false)]
        public BlockCard BlockCard { get; set; }

        /// <summary>
        /// Gets or Sets BlockDomain
        /// </summary>
        [DataMember(Name="blockDomain", EmitDefaultValue=false)]
        public BlockDomain BlockDomain { get; set; }

        /// <summary>
        /// Gets or Sets BlockName
        /// </summary>
        [DataMember(Name="blockName", EmitDefaultValue=false)]
        public BlockName BlockName { get; set; }

        /// <summary>
        /// Gets or Sets BlockIPAddress
        /// </summary>
        [DataMember(Name="blockIPAddress", EmitDefaultValue=false)]
        public BlockIPAddress BlockIPAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BlockedItems {\n");
            sb.Append("  BlockCard: ").Append(BlockCard).Append("\n");
            sb.Append("  BlockDomain: ").Append(BlockDomain).Append("\n");
            sb.Append("  BlockName: ").Append(BlockName).Append("\n");
            sb.Append("  BlockIPAddress: ").Append(BlockIPAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BlockedItems);
        }

        /// <summary>
        /// Returns true if BlockedItems instances are equal
        /// </summary>
        /// <param name="input">Instance of BlockedItems to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BlockedItems input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BlockCard == input.BlockCard ||
                    (this.BlockCard != null &&
                    this.BlockCard.Equals(input.BlockCard))
                ) && 
                (
                    this.BlockDomain == input.BlockDomain ||
                    (this.BlockDomain != null &&
                    this.BlockDomain.Equals(input.BlockDomain))
                ) && 
                (
                    this.BlockName == input.BlockName ||
                    (this.BlockName != null &&
                    this.BlockName.Equals(input.BlockName))
                ) && 
                (
                    this.BlockIPAddress == input.BlockIPAddress ||
                    (this.BlockIPAddress != null &&
                    this.BlockIPAddress.Equals(input.BlockIPAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BlockCard != null)
                    hashCode = hashCode * 59 + this.BlockCard.GetHashCode();
                if (this.BlockDomain != null)
                    hashCode = hashCode * 59 + this.BlockDomain.GetHashCode();
                if (this.BlockName != null)
                    hashCode = hashCode * 59 + this.BlockName.GetHashCode();
                if (this.BlockIPAddress != null)
                    hashCode = hashCode * 59 + this.BlockIPAddress.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
