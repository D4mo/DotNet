/* 
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 6.12.0.20200605.001
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Object contains logo data.
    /// </summary>
    [DataContract]
    public partial class Logo :  IEquatable<Logo>, IValidatableObject
    {
        /// <summary>
        /// Define position of logo.
        /// </summary>
        /// <value>Define position of logo.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PositionEnum
        {
            /// <summary>
            /// Enum TOP for value: TOP
            /// </summary>
            [EnumMember(Value = "TOP")]
            TOP = 1,

            /// <summary>
            /// Enum BOTTOM for value: BOTTOM
            /// </summary>
            [EnumMember(Value = "BOTTOM")]
            BOTTOM = 2

        }

        /// <summary>
        /// Define position of logo.
        /// </summary>
        /// <value>Define position of logo.</value>
        [DataMember(Name="position", EmitDefaultValue=true)]
        public PositionEnum Position { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Logo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Logo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Logo" /> class.
        /// </summary>
        /// <param name="position">Define position of logo. (required).</param>
        /// <param name="filename">The filename of the uploaded logo. (required).</param>
        /// <param name="data">Base64 image data. (required).</param>
        public Logo(PositionEnum position = default(PositionEnum), string filename = default(string), byte[] data = default(byte[]))
        {
            // to ensure "position" is required (not null)
            if (position == null)
            {
                throw new InvalidDataException("position is a required property for Logo and cannot be null");
            }
            else
            {
                this.Position = position;
            }
            
            // to ensure "filename" is required (not null)
            if (filename == null)
            {
                throw new InvalidDataException("filename is a required property for Logo and cannot be null");
            }
            else
            {
                this.Filename = filename;
            }
            
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new InvalidDataException("data is a required property for Logo and cannot be null");
            }
            else
            {
                this.Data = data;
            }
            
        }
        

        /// <summary>
        /// The filename of the uploaded logo.
        /// </summary>
        /// <value>The filename of the uploaded logo.</value>
        [DataMember(Name="filename", EmitDefaultValue=true)]
        public string Filename { get; set; }

        /// <summary>
        /// Base64 image data.
        /// </summary>
        /// <value>Base64 image data.</value>
        [DataMember(Name="data", EmitDefaultValue=true)]
        public byte[] Data { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Logo {\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Logo);
        }

        /// <summary>
        /// Returns true if Logo instances are equal
        /// </summary>
        /// <param name="input">Instance of Logo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Logo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.Filename != null)
                    hashCode = hashCode * 59 + this.Filename.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
