/* 
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.1.0.20210122.001
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Sofort setup.
    /// </summary>
    [DataContract]
    public partial class SofortSetup : IEquatable<SofortSetup>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SofortSetup" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SofortSetup() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SofortSetup" /> class.
        /// </summary>
        /// <param name="customerId">Sofort customer identifier. (required).</param>
        /// <param name="projectId">Sofort project identifier. (required).</param>
        /// <param name="apiKey">API key provided by Sofort. (required).</param>
        public SofortSetup(string customerId = default(string), string projectId = default(string), string apiKey = default(string))
        {
            // to ensure "customerId" is required (not null)
            this.CustomerId = customerId ?? throw new ArgumentNullException("customerId is a required property for SofortSetup and cannot be null");
            // to ensure "projectId" is required (not null)
            this.ProjectId = projectId ?? throw new ArgumentNullException("projectId is a required property for SofortSetup and cannot be null");
            // to ensure "apiKey" is required (not null)
            this.ApiKey = apiKey ?? throw new ArgumentNullException("apiKey is a required property for SofortSetup and cannot be null");
        }

        /// <summary>
        /// Sofort customer identifier.
        /// </summary>
        /// <value>Sofort customer identifier.</value>
        [DataMember(Name = "customerId", EmitDefaultValue = false)]
        public string CustomerId { get; set; }

        /// <summary>
        /// Sofort project identifier.
        /// </summary>
        /// <value>Sofort project identifier.</value>
        [DataMember(Name = "projectId", EmitDefaultValue = false)]
        public string ProjectId { get; set; }

        /// <summary>
        /// API key provided by Sofort.
        /// </summary>
        /// <value>API key provided by Sofort.</value>
        [DataMember(Name = "apiKey", EmitDefaultValue = false)]
        public string ApiKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SofortSetup {\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SofortSetup);
        }

        /// <summary>
        /// Returns true if SofortSetup instances are equal
        /// </summary>
        /// <param name="input">Instance of SofortSetup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SofortSetup input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.ApiKey == input.ApiKey ||
                    (this.ApiKey != null &&
                    this.ApiKey.Equals(input.ApiKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomerId != null)
                    hashCode = hashCode * 59 + this.CustomerId.GetHashCode();
                if (this.ProjectId != null)
                    hashCode = hashCode * 59 + this.ProjectId.GetHashCode();
                if (this.ApiKey != null)
                    hashCode = hashCode * 59 + this.ApiKey.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CustomerId (string) maxLength
            if(this.CustomerId != null && this.CustomerId.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomerId, length must be less than 10.", new [] { "CustomerId" });
            }

            // CustomerId (string) pattern
            Regex regexCustomerId = new Regex(@"^[0-9]+$", RegexOptions.CultureInvariant);
            if (false == regexCustomerId.Match(this.CustomerId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomerId, must match a pattern of " + regexCustomerId, new [] { "CustomerId" });
            }

            // ProjectId (string) maxLength
            if(this.ProjectId != null && this.ProjectId.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProjectId, length must be less than 10.", new [] { "ProjectId" });
            }

            // ProjectId (string) pattern
            Regex regexProjectId = new Regex(@"^[0-9]+$", RegexOptions.CultureInvariant);
            if (false == regexProjectId.Match(this.ProjectId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProjectId, must match a pattern of " + regexProjectId, new [] { "ProjectId" });
            }

            // ApiKey (string) maxLength
            if(this.ApiKey != null && this.ApiKey.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ApiKey, length must be less than 40.", new [] { "ApiKey" });
            }

            // ApiKey (string) pattern
            Regex regexApiKey = new Regex(@"^[a-z0-9]+$", RegexOptions.CultureInvariant);
            if (false == regexApiKey.Match(this.ApiKey).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ApiKey, must match a pattern of " + regexApiKey, new [] { "ApiKey" });
            }

            yield break;
        }
    }
}
