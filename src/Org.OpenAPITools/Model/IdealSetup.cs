/* 
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.1.0.20210122.001
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Ideal setup.
    /// </summary>
    [DataContract]
    public partial class IdealSetup : IEquatable<IdealSetup>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IdealSetup" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IdealSetup() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IdealSetup" /> class.
        /// </summary>
        /// <param name="merchantId">Ideal Merchant identifier. (required).</param>
        /// <param name="subID">Ideal Sub identifier. (required).</param>
        public IdealSetup(string merchantId = default(string), string subID = default(string))
        {
            // to ensure "merchantId" is required (not null)
            this.MerchantId = merchantId ?? throw new ArgumentNullException("merchantId is a required property for IdealSetup and cannot be null");
            // to ensure "subID" is required (not null)
            this.SubID = subID ?? throw new ArgumentNullException("subID is a required property for IdealSetup and cannot be null");
        }

        /// <summary>
        /// Ideal Merchant identifier.
        /// </summary>
        /// <value>Ideal Merchant identifier.</value>
        [DataMember(Name = "merchantId", EmitDefaultValue = false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Ideal Sub identifier.
        /// </summary>
        /// <value>Ideal Sub identifier.</value>
        [DataMember(Name = "subID", EmitDefaultValue = false)]
        public string SubID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IdealSetup {\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  SubID: ").Append(SubID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IdealSetup);
        }

        /// <summary>
        /// Returns true if IdealSetup instances are equal
        /// </summary>
        /// <param name="input">Instance of IdealSetup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IdealSetup input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.SubID == input.SubID ||
                    (this.SubID != null &&
                    this.SubID.Equals(input.SubID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.SubID != null)
                    hashCode = hashCode * 59 + this.SubID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MerchantId (string) maxLength
            if(this.MerchantId != null && this.MerchantId.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantId, length must be less than 30.", new [] { "MerchantId" });
            }

            // MerchantId (string) pattern
            Regex regexMerchantId = new Regex(@"^[0-9]+$", RegexOptions.CultureInvariant);
            if (false == regexMerchantId.Match(this.MerchantId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantId, must match a pattern of " + regexMerchantId, new [] { "MerchantId" });
            }

            // SubID (string) maxLength
            if(this.SubID != null && this.SubID.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SubID, length must be less than 30.", new [] { "SubID" });
            }

            // SubID (string) pattern
            Regex regexSubID = new Regex(@"^[0-9]+$", RegexOptions.CultureInvariant);
            if (false == regexSubID.Match(this.SubID).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SubID, must match a pattern of " + regexSubID, new [] { "SubID" });
            }

            yield break;
        }
    }
}
