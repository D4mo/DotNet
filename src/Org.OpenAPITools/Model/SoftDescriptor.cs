/* 
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 6.9.1.20191223.002
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Identifying information about a merchant which appears on buyer&#39;s credit/debit card statements.
    /// </summary>
    [DataContract]
    public partial class SoftDescriptor :  IEquatable<SoftDescriptor>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SoftDescriptor" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SoftDescriptor() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SoftDescriptor" /> class.
        /// </summary>
        /// <param name="dynamicMerchantName">Store \&quot;doing-business-as\&quot; name. (required).</param>
        /// <param name="mcc">The 4-digit merchant category code (MCC). The merchant might be associated with multiple MCCs. In that case the MCC provided here will be the one that better describes the current transaction..</param>
        public SoftDescriptor(string dynamicMerchantName = default(string), string mcc = default(string))
        {
            // to ensure "dynamicMerchantName" is required (not null)
            if (dynamicMerchantName == null)
            {
                throw new InvalidDataException("dynamicMerchantName is a required property for SoftDescriptor and cannot be null");
            }
            else
            {
                this.DynamicMerchantName = dynamicMerchantName;
            }

            this.Mcc = mcc;
        }
        
        /// <summary>
        /// Store \&quot;doing-business-as\&quot; name.
        /// </summary>
        /// <value>Store \&quot;doing-business-as\&quot; name.</value>
        [DataMember(Name="dynamicMerchantName", EmitDefaultValue=false)]
        public string DynamicMerchantName { get; set; }

        /// <summary>
        /// The 4-digit merchant category code (MCC). The merchant might be associated with multiple MCCs. In that case the MCC provided here will be the one that better describes the current transaction.
        /// </summary>
        /// <value>The 4-digit merchant category code (MCC). The merchant might be associated with multiple MCCs. In that case the MCC provided here will be the one that better describes the current transaction.</value>
        [DataMember(Name="mcc", EmitDefaultValue=false)]
        public string Mcc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SoftDescriptor {\n");
            sb.Append("  DynamicMerchantName: ").Append(DynamicMerchantName).Append("\n");
            sb.Append("  Mcc: ").Append(Mcc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SoftDescriptor);
        }

        /// <summary>
        /// Returns true if SoftDescriptor instances are equal
        /// </summary>
        /// <param name="input">Instance of SoftDescriptor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SoftDescriptor input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DynamicMerchantName == input.DynamicMerchantName ||
                    (this.DynamicMerchantName != null &&
                    this.DynamicMerchantName.Equals(input.DynamicMerchantName))
                ) && 
                (
                    this.Mcc == input.Mcc ||
                    (this.Mcc != null &&
                    this.Mcc.Equals(input.Mcc))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DynamicMerchantName != null)
                    hashCode = hashCode * 59 + this.DynamicMerchantName.GetHashCode();
                if (this.Mcc != null)
                    hashCode = hashCode * 59 + this.Mcc.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DynamicMerchantName (string) pattern
            Regex regexDynamicMerchantName = new Regex(@"^(?!\\s*$).+", RegexOptions.CultureInvariant);
            if (false == regexDynamicMerchantName.Match(this.DynamicMerchantName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DynamicMerchantName, must match a pattern of " + regexDynamicMerchantName, new [] { "DynamicMerchantName" });
            }

            // Mcc (string) maxLength
            if(this.Mcc != null && this.Mcc.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Mcc, length must be less than 4.", new [] { "Mcc" });
            }

            yield break;
        }
    }

}
