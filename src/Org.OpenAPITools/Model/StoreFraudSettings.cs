/* 
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.1.0.20210122.001
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Object for fraud settings.
    /// </summary>
    [DataContract]
    public partial class StoreFraudSettings : IEquatable<StoreFraudSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StoreFraudSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StoreFraudSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StoreFraudSettings" /> class.
        /// </summary>
        /// <param name="id">The outlet identificator. (required).</param>
        /// <param name="fraudSettings">fraudSettings (required).</param>
        public StoreFraudSettings(string id = default(string), FraudSettings fraudSettings = default(FraudSettings))
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for StoreFraudSettings and cannot be null");
            // to ensure "fraudSettings" is required (not null)
            this.FraudSettings = fraudSettings ?? throw new ArgumentNullException("fraudSettings is a required property for StoreFraudSettings and cannot be null");
        }

        /// <summary>
        /// The outlet identificator.
        /// </summary>
        /// <value>The outlet identificator.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets FraudSettings
        /// </summary>
        [DataMember(Name = "fraudSettings", EmitDefaultValue = false)]
        public FraudSettings FraudSettings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StoreFraudSettings {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FraudSettings: ").Append(FraudSettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StoreFraudSettings);
        }

        /// <summary>
        /// Returns true if StoreFraudSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of StoreFraudSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoreFraudSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.FraudSettings == input.FraudSettings ||
                    (this.FraudSettings != null &&
                    this.FraudSettings.Equals(input.FraudSettings))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.FraudSettings != null)
                    hashCode = hashCode * 59 + this.FraudSettings.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
