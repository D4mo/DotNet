/* 
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 6.8.0.20190731.002
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Use this model to provide order related details.
    /// </summary>
    [DataContract]
    public partial class Order :  IEquatable<Order>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Order" /> class.
        /// </summary>
        /// <param name="orderId">Client Order ID if supplied by client..</param>
        /// <param name="billing">billing.</param>
        /// <param name="shipping">shipping.</param>
        /// <param name="industrySpecificExtensions">industrySpecificExtensions.</param>
        /// <param name="purchaseCard">purchaseCard.</param>
        /// <param name="installmentOptions">installmentOptions.</param>
        /// <param name="softDescriptor">softDescriptor.</param>
        /// <param name="additionalDetails">additionalDetails.</param>
        public Order(string orderId = default(string), Billing billing = default(Billing), Shipping shipping = default(Shipping), IndustrySpecificExtensions industrySpecificExtensions = default(IndustrySpecificExtensions), PurchaseCards purchaseCard = default(PurchaseCards), InstallmentOptions installmentOptions = default(InstallmentOptions), SoftDescriptor softDescriptor = default(SoftDescriptor), AdditionalDetails additionalDetails = default(AdditionalDetails))
        {
            this.OrderId = orderId;
            this.Billing = billing;
            this.Shipping = shipping;
            this.IndustrySpecificExtensions = industrySpecificExtensions;
            this.PurchaseCard = purchaseCard;
            this.InstallmentOptions = installmentOptions;
            this.SoftDescriptor = softDescriptor;
            this.AdditionalDetails = additionalDetails;
        }
        
        /// <summary>
        /// Client Order ID if supplied by client.
        /// </summary>
        /// <value>Client Order ID if supplied by client.</value>
        [DataMember(Name="orderId", EmitDefaultValue=false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Gets or Sets Billing
        /// </summary>
        [DataMember(Name="billing", EmitDefaultValue=false)]
        public Billing Billing { get; set; }

        /// <summary>
        /// Gets or Sets Shipping
        /// </summary>
        [DataMember(Name="shipping", EmitDefaultValue=false)]
        public Shipping Shipping { get; set; }

        /// <summary>
        /// Gets or Sets IndustrySpecificExtensions
        /// </summary>
        [DataMember(Name="industrySpecificExtensions", EmitDefaultValue=false)]
        public IndustrySpecificExtensions IndustrySpecificExtensions { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseCard
        /// </summary>
        [DataMember(Name="purchaseCard", EmitDefaultValue=false)]
        public PurchaseCards PurchaseCard { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentOptions
        /// </summary>
        [DataMember(Name="installmentOptions", EmitDefaultValue=false)]
        public InstallmentOptions InstallmentOptions { get; set; }

        /// <summary>
        /// Gets or Sets SoftDescriptor
        /// </summary>
        [DataMember(Name="softDescriptor", EmitDefaultValue=false)]
        public SoftDescriptor SoftDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalDetails
        /// </summary>
        [DataMember(Name="additionalDetails", EmitDefaultValue=false)]
        public AdditionalDetails AdditionalDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Order {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Billing: ").Append(Billing).Append("\n");
            sb.Append("  Shipping: ").Append(Shipping).Append("\n");
            sb.Append("  IndustrySpecificExtensions: ").Append(IndustrySpecificExtensions).Append("\n");
            sb.Append("  PurchaseCard: ").Append(PurchaseCard).Append("\n");
            sb.Append("  InstallmentOptions: ").Append(InstallmentOptions).Append("\n");
            sb.Append("  SoftDescriptor: ").Append(SoftDescriptor).Append("\n");
            sb.Append("  AdditionalDetails: ").Append(AdditionalDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Order);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="input">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Order input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.Billing == input.Billing ||
                    (this.Billing != null &&
                    this.Billing.Equals(input.Billing))
                ) && 
                (
                    this.Shipping == input.Shipping ||
                    (this.Shipping != null &&
                    this.Shipping.Equals(input.Shipping))
                ) && 
                (
                    this.IndustrySpecificExtensions == input.IndustrySpecificExtensions ||
                    (this.IndustrySpecificExtensions != null &&
                    this.IndustrySpecificExtensions.Equals(input.IndustrySpecificExtensions))
                ) && 
                (
                    this.PurchaseCard == input.PurchaseCard ||
                    (this.PurchaseCard != null &&
                    this.PurchaseCard.Equals(input.PurchaseCard))
                ) && 
                (
                    this.InstallmentOptions == input.InstallmentOptions ||
                    (this.InstallmentOptions != null &&
                    this.InstallmentOptions.Equals(input.InstallmentOptions))
                ) && 
                (
                    this.SoftDescriptor == input.SoftDescriptor ||
                    (this.SoftDescriptor != null &&
                    this.SoftDescriptor.Equals(input.SoftDescriptor))
                ) && 
                (
                    this.AdditionalDetails == input.AdditionalDetails ||
                    (this.AdditionalDetails != null &&
                    this.AdditionalDetails.Equals(input.AdditionalDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.Billing != null)
                    hashCode = hashCode * 59 + this.Billing.GetHashCode();
                if (this.Shipping != null)
                    hashCode = hashCode * 59 + this.Shipping.GetHashCode();
                if (this.IndustrySpecificExtensions != null)
                    hashCode = hashCode * 59 + this.IndustrySpecificExtensions.GetHashCode();
                if (this.PurchaseCard != null)
                    hashCode = hashCode * 59 + this.PurchaseCard.GetHashCode();
                if (this.InstallmentOptions != null)
                    hashCode = hashCode * 59 + this.InstallmentOptions.GetHashCode();
                if (this.SoftDescriptor != null)
                    hashCode = hashCode * 59 + this.SoftDescriptor.GetHashCode();
                if (this.AdditionalDetails != null)
                    hashCode = hashCode * 59 + this.AdditionalDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // OrderId (string) maxLength
            if(this.OrderId != null && this.OrderId.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrderId, length must be less than 100.", new [] { "OrderId" });
            }

            yield break;
        }
    }

}
