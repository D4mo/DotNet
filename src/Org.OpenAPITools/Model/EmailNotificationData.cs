/* 
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.1.0.20210122.001
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Object that holds data to configure email notifications.
    /// </summary>
    [DataContract]
    public partial class EmailNotificationData : IEquatable<EmailNotificationData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailNotificationData" /> class.
        /// </summary>
        /// <param name="enableNotification">Use this to enable/disable email notifications..</param>
        /// <param name="merchantName">The merchant name to be displayed in the email to customer..</param>
        /// <param name="receiverEmail">The email address(es) for receiving transaction notifications..</param>
        /// <param name="senderEmail">The email address for sending transaction notifications to customer..</param>
        /// <param name="locale">The locale for received notifications..</param>
        public EmailNotificationData(bool enableNotification = default(bool), string merchantName = default(string), string receiverEmail = default(string), string senderEmail = default(string), string locale = default(string))
        {
            this.EnableNotification = enableNotification;
            this.MerchantName = merchantName;
            this.ReceiverEmail = receiverEmail;
            this.SenderEmail = senderEmail;
            this.Locale = locale;
        }

        /// <summary>
        /// Use this to enable/disable email notifications.
        /// </summary>
        /// <value>Use this to enable/disable email notifications.</value>
        [DataMember(Name = "enableNotification", EmitDefaultValue = false)]
        public bool EnableNotification { get; set; }

        /// <summary>
        /// The merchant name to be displayed in the email to customer.
        /// </summary>
        /// <value>The merchant name to be displayed in the email to customer.</value>
        [DataMember(Name = "merchantName", EmitDefaultValue = false)]
        public string MerchantName { get; set; }

        /// <summary>
        /// The email address(es) for receiving transaction notifications.
        /// </summary>
        /// <value>The email address(es) for receiving transaction notifications.</value>
        [DataMember(Name = "receiverEmail", EmitDefaultValue = false)]
        public string ReceiverEmail { get; set; }

        /// <summary>
        /// The email address for sending transaction notifications to customer.
        /// </summary>
        /// <value>The email address for sending transaction notifications to customer.</value>
        [DataMember(Name = "senderEmail", EmitDefaultValue = false)]
        public string SenderEmail { get; set; }

        /// <summary>
        /// The locale for received notifications.
        /// </summary>
        /// <value>The locale for received notifications.</value>
        [DataMember(Name = "locale", EmitDefaultValue = false)]
        public string Locale { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailNotificationData {\n");
            sb.Append("  EnableNotification: ").Append(EnableNotification).Append("\n");
            sb.Append("  MerchantName: ").Append(MerchantName).Append("\n");
            sb.Append("  ReceiverEmail: ").Append(ReceiverEmail).Append("\n");
            sb.Append("  SenderEmail: ").Append(SenderEmail).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailNotificationData);
        }

        /// <summary>
        /// Returns true if EmailNotificationData instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailNotificationData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailNotificationData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EnableNotification == input.EnableNotification ||
                    (this.EnableNotification != null &&
                    this.EnableNotification.Equals(input.EnableNotification))
                ) && 
                (
                    this.MerchantName == input.MerchantName ||
                    (this.MerchantName != null &&
                    this.MerchantName.Equals(input.MerchantName))
                ) && 
                (
                    this.ReceiverEmail == input.ReceiverEmail ||
                    (this.ReceiverEmail != null &&
                    this.ReceiverEmail.Equals(input.ReceiverEmail))
                ) && 
                (
                    this.SenderEmail == input.SenderEmail ||
                    (this.SenderEmail != null &&
                    this.SenderEmail.Equals(input.SenderEmail))
                ) && 
                (
                    this.Locale == input.Locale ||
                    (this.Locale != null &&
                    this.Locale.Equals(input.Locale))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EnableNotification != null)
                    hashCode = hashCode * 59 + this.EnableNotification.GetHashCode();
                if (this.MerchantName != null)
                    hashCode = hashCode * 59 + this.MerchantName.GetHashCode();
                if (this.ReceiverEmail != null)
                    hashCode = hashCode * 59 + this.ReceiverEmail.GetHashCode();
                if (this.SenderEmail != null)
                    hashCode = hashCode * 59 + this.SenderEmail.GetHashCode();
                if (this.Locale != null)
                    hashCode = hashCode * 59 + this.Locale.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
