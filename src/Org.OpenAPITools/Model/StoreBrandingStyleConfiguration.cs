/* 
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 6.14.0.20201015.001
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// StoreBrandingStyleConfiguration
    /// </summary>
    [DataContract]
    public partial class StoreBrandingStyleConfiguration : IEquatable<StoreBrandingStyleConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StoreBrandingStyleConfiguration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StoreBrandingStyleConfiguration() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StoreBrandingStyleConfiguration" /> class.
        /// </summary>
        /// <param name="id">An optional outlet id for clients that support multiple stores in the same developer app. (required).</param>
        /// <param name="combined">combined.</param>
        /// <param name="classic">classic.</param>
        public StoreBrandingStyleConfiguration(string id = default(string), CombinedMode combined = default(CombinedMode), ClassicMode classic = default(ClassicMode))
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for StoreBrandingStyleConfiguration and cannot be null");
            this.Combined = combined;
            this.Classic = classic;
        }

        /// <summary>
        /// An optional outlet id for clients that support multiple stores in the same developer app.
        /// </summary>
        /// <value>An optional outlet id for clients that support multiple stores in the same developer app.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Combined
        /// </summary>
        [DataMember(Name = "combined", EmitDefaultValue = false)]
        public CombinedMode Combined { get; set; }

        /// <summary>
        /// Gets or Sets Classic
        /// </summary>
        [DataMember(Name = "classic", EmitDefaultValue = false)]
        public ClassicMode Classic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StoreBrandingStyleConfiguration {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Combined: ").Append(Combined).Append("\n");
            sb.Append("  Classic: ").Append(Classic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StoreBrandingStyleConfiguration);
        }

        /// <summary>
        /// Returns true if StoreBrandingStyleConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of StoreBrandingStyleConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoreBrandingStyleConfiguration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Combined == input.Combined ||
                    (this.Combined != null &&
                    this.Combined.Equals(input.Combined))
                ) && 
                (
                    this.Classic == input.Classic ||
                    (this.Classic != null &&
                    this.Classic.Equals(input.Classic))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Combined != null)
                    hashCode = hashCode * 59 + this.Combined.GetHashCode();
                if (this.Classic != null)
                    hashCode = hashCode * 59 + this.Classic.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
