/* 
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.1.0.20210122.001
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Object contains classic mode branding style properties.
    /// </summary>
    [DataContract]
    public partial class ClassicMode : IEquatable<ClassicMode>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClassicMode" /> class.
        /// </summary>
        /// <param name="backgroundColor">backgroundColor.</param>
        /// <param name="mobile">mobile.</param>
        /// <param name="amountTitle">amountTitle.</param>
        /// <param name="superscription">superscription.</param>
        /// <param name="individualText">individualText.</param>
        /// <param name="label">label.</param>
        /// <param name="normalText">normalText.</param>
        /// <param name="buttons">buttons.</param>
        /// <param name="anchor">anchor.</param>
        /// <param name="systemMessages">systemMessages.</param>
        public ClassicMode(BackgroundColor backgroundColor = default(BackgroundColor), Mobile mobile = default(Mobile), FontProperties amountTitle = default(FontProperties), FontProperties superscription = default(FontProperties), FontProperties individualText = default(FontProperties), FontProperties label = default(FontProperties), FontProperties normalText = default(FontProperties), Properties buttons = default(Properties), Properties anchor = default(Properties), Properties systemMessages = default(Properties))
        {
            this.BackgroundColor = backgroundColor;
            this.Mobile = mobile;
            this.AmountTitle = amountTitle;
            this.Superscription = superscription;
            this.IndividualText = individualText;
            this.Label = label;
            this.NormalText = normalText;
            this.Buttons = buttons;
            this.Anchor = anchor;
            this.SystemMessages = systemMessages;
        }

        /// <summary>
        /// Gets or Sets BackgroundColor
        /// </summary>
        [DataMember(Name = "backgroundColor", EmitDefaultValue = false)]
        public BackgroundColor BackgroundColor { get; set; }

        /// <summary>
        /// Gets or Sets Mobile
        /// </summary>
        [DataMember(Name = "mobile", EmitDefaultValue = false)]
        public Mobile Mobile { get; set; }

        /// <summary>
        /// Gets or Sets AmountTitle
        /// </summary>
        [DataMember(Name = "amountTitle", EmitDefaultValue = false)]
        public FontProperties AmountTitle { get; set; }

        /// <summary>
        /// Gets or Sets Superscription
        /// </summary>
        [DataMember(Name = "superscription", EmitDefaultValue = false)]
        public FontProperties Superscription { get; set; }

        /// <summary>
        /// Gets or Sets IndividualText
        /// </summary>
        [DataMember(Name = "individualText", EmitDefaultValue = false)]
        public FontProperties IndividualText { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name = "label", EmitDefaultValue = false)]
        public FontProperties Label { get; set; }

        /// <summary>
        /// Gets or Sets NormalText
        /// </summary>
        [DataMember(Name = "normalText", EmitDefaultValue = false)]
        public FontProperties NormalText { get; set; }

        /// <summary>
        /// Gets or Sets Buttons
        /// </summary>
        [DataMember(Name = "buttons", EmitDefaultValue = false)]
        public Properties Buttons { get; set; }

        /// <summary>
        /// Gets or Sets Anchor
        /// </summary>
        [DataMember(Name = "anchor", EmitDefaultValue = false)]
        public Properties Anchor { get; set; }

        /// <summary>
        /// Gets or Sets SystemMessages
        /// </summary>
        [DataMember(Name = "systemMessages", EmitDefaultValue = false)]
        public Properties SystemMessages { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClassicMode {\n");
            sb.Append("  BackgroundColor: ").Append(BackgroundColor).Append("\n");
            sb.Append("  Mobile: ").Append(Mobile).Append("\n");
            sb.Append("  AmountTitle: ").Append(AmountTitle).Append("\n");
            sb.Append("  Superscription: ").Append(Superscription).Append("\n");
            sb.Append("  IndividualText: ").Append(IndividualText).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  NormalText: ").Append(NormalText).Append("\n");
            sb.Append("  Buttons: ").Append(Buttons).Append("\n");
            sb.Append("  Anchor: ").Append(Anchor).Append("\n");
            sb.Append("  SystemMessages: ").Append(SystemMessages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClassicMode);
        }

        /// <summary>
        /// Returns true if ClassicMode instances are equal
        /// </summary>
        /// <param name="input">Instance of ClassicMode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClassicMode input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BackgroundColor == input.BackgroundColor ||
                    (this.BackgroundColor != null &&
                    this.BackgroundColor.Equals(input.BackgroundColor))
                ) && 
                (
                    this.Mobile == input.Mobile ||
                    (this.Mobile != null &&
                    this.Mobile.Equals(input.Mobile))
                ) && 
                (
                    this.AmountTitle == input.AmountTitle ||
                    (this.AmountTitle != null &&
                    this.AmountTitle.Equals(input.AmountTitle))
                ) && 
                (
                    this.Superscription == input.Superscription ||
                    (this.Superscription != null &&
                    this.Superscription.Equals(input.Superscription))
                ) && 
                (
                    this.IndividualText == input.IndividualText ||
                    (this.IndividualText != null &&
                    this.IndividualText.Equals(input.IndividualText))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.NormalText == input.NormalText ||
                    (this.NormalText != null &&
                    this.NormalText.Equals(input.NormalText))
                ) && 
                (
                    this.Buttons == input.Buttons ||
                    (this.Buttons != null &&
                    this.Buttons.Equals(input.Buttons))
                ) && 
                (
                    this.Anchor == input.Anchor ||
                    (this.Anchor != null &&
                    this.Anchor.Equals(input.Anchor))
                ) && 
                (
                    this.SystemMessages == input.SystemMessages ||
                    (this.SystemMessages != null &&
                    this.SystemMessages.Equals(input.SystemMessages))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BackgroundColor != null)
                    hashCode = hashCode * 59 + this.BackgroundColor.GetHashCode();
                if (this.Mobile != null)
                    hashCode = hashCode * 59 + this.Mobile.GetHashCode();
                if (this.AmountTitle != null)
                    hashCode = hashCode * 59 + this.AmountTitle.GetHashCode();
                if (this.Superscription != null)
                    hashCode = hashCode * 59 + this.Superscription.GetHashCode();
                if (this.IndividualText != null)
                    hashCode = hashCode * 59 + this.IndividualText.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.NormalText != null)
                    hashCode = hashCode * 59 + this.NormalText.GetHashCode();
                if (this.Buttons != null)
                    hashCode = hashCode * 59 + this.Buttons.GetHashCode();
                if (this.Anchor != null)
                    hashCode = hashCode * 59 + this.Anchor.GetHashCode();
                if (this.SystemMessages != null)
                    hashCode = hashCode * 59 + this.SystemMessages.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
