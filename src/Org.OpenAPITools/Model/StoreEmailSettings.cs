/* 
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 6.12.0.20200605.001
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Object for email settings.
    /// </summary>
    [DataContract]
    public partial class StoreEmailSettings :  IEquatable<StoreEmailSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StoreEmailSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StoreEmailSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StoreEmailSettings" /> class.
        /// </summary>
        /// <param name="id">An outlet identificator. (required).</param>
        /// <param name="emailNotificationData">emailNotificationData (required).</param>
        public StoreEmailSettings(string id = default(string), EmailNotificationData emailNotificationData = default(EmailNotificationData))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for StoreEmailSettings and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            
            // to ensure "emailNotificationData" is required (not null)
            if (emailNotificationData == null)
            {
                throw new InvalidDataException("emailNotificationData is a required property for StoreEmailSettings and cannot be null");
            }
            else
            {
                this.EmailNotificationData = emailNotificationData;
            }
            
        }
        
        /// <summary>
        /// An outlet identificator.
        /// </summary>
        /// <value>An outlet identificator.</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets EmailNotificationData
        /// </summary>
        [DataMember(Name="emailNotificationData", EmitDefaultValue=true)]
        public EmailNotificationData EmailNotificationData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StoreEmailSettings {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EmailNotificationData: ").Append(EmailNotificationData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StoreEmailSettings);
        }

        /// <summary>
        /// Returns true if StoreEmailSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of StoreEmailSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoreEmailSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.EmailNotificationData == input.EmailNotificationData ||
                    (this.EmailNotificationData != null &&
                    this.EmailNotificationData.Equals(input.EmailNotificationData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.EmailNotificationData != null)
                    hashCode = hashCode * 59 + this.EmailNotificationData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
