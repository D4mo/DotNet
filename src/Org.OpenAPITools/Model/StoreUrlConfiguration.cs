/* 
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.1.0.20210122.001
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// StoreUrlConfiguration
    /// </summary>
    [DataContract]
    public partial class StoreUrlConfiguration : IEquatable<StoreUrlConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StoreUrlConfiguration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StoreUrlConfiguration() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StoreUrlConfiguration" /> class.
        /// </summary>
        /// <param name="id">An optional outlet id for clients that support multiple stores in the same developer app. (required).</param>
        /// <param name="transactionNotificationUrl">Transaction notification URL for Connect..</param>
        /// <param name="recurringTransactionNotificationUrl">Recurring transaction notification URL for recurring payments..</param>
        /// <param name="responseSuccessUrl">Response success URL for Connect..</param>
        /// <param name="responseFailureUrl">Response failure URL for Connect..</param>
        /// <param name="skipResultPageForSuccess">Skip connect result page when transaction is approved..</param>
        /// <param name="skipResultPageForFailure">Skip connect result page when transaction is not approved..</param>
        /// <param name="overwriteUrlAllowed">Overwrite URLs in database by those from request..</param>
        public StoreUrlConfiguration(string id = default(string), string transactionNotificationUrl = default(string), string recurringTransactionNotificationUrl = default(string), string responseSuccessUrl = default(string), string responseFailureUrl = default(string), bool skipResultPageForSuccess = default(bool), bool skipResultPageForFailure = default(bool), bool overwriteUrlAllowed = default(bool))
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for StoreUrlConfiguration and cannot be null");
            this.TransactionNotificationUrl = transactionNotificationUrl;
            this.RecurringTransactionNotificationUrl = recurringTransactionNotificationUrl;
            this.ResponseSuccessUrl = responseSuccessUrl;
            this.ResponseFailureUrl = responseFailureUrl;
            this.SkipResultPageForSuccess = skipResultPageForSuccess;
            this.SkipResultPageForFailure = skipResultPageForFailure;
            this.OverwriteUrlAllowed = overwriteUrlAllowed;
        }

        /// <summary>
        /// An optional outlet id for clients that support multiple stores in the same developer app.
        /// </summary>
        /// <value>An optional outlet id for clients that support multiple stores in the same developer app.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Transaction notification URL for Connect.
        /// </summary>
        /// <value>Transaction notification URL for Connect.</value>
        [DataMember(Name = "transactionNotificationUrl", EmitDefaultValue = false)]
        public string TransactionNotificationUrl { get; set; }

        /// <summary>
        /// Recurring transaction notification URL for recurring payments.
        /// </summary>
        /// <value>Recurring transaction notification URL for recurring payments.</value>
        [DataMember(Name = "recurringTransactionNotificationUrl", EmitDefaultValue = false)]
        public string RecurringTransactionNotificationUrl { get; set; }

        /// <summary>
        /// Response success URL for Connect.
        /// </summary>
        /// <value>Response success URL for Connect.</value>
        [DataMember(Name = "responseSuccessUrl", EmitDefaultValue = false)]
        public string ResponseSuccessUrl { get; set; }

        /// <summary>
        /// Response failure URL for Connect.
        /// </summary>
        /// <value>Response failure URL for Connect.</value>
        [DataMember(Name = "responseFailureUrl", EmitDefaultValue = false)]
        public string ResponseFailureUrl { get; set; }

        /// <summary>
        /// Skip connect result page when transaction is approved.
        /// </summary>
        /// <value>Skip connect result page when transaction is approved.</value>
        [DataMember(Name = "skipResultPageForSuccess", EmitDefaultValue = false)]
        public bool SkipResultPageForSuccess { get; set; }

        /// <summary>
        /// Skip connect result page when transaction is not approved.
        /// </summary>
        /// <value>Skip connect result page when transaction is not approved.</value>
        [DataMember(Name = "skipResultPageForFailure", EmitDefaultValue = false)]
        public bool SkipResultPageForFailure { get; set; }

        /// <summary>
        /// Overwrite URLs in database by those from request.
        /// </summary>
        /// <value>Overwrite URLs in database by those from request.</value>
        [DataMember(Name = "overwriteUrlAllowed", EmitDefaultValue = false)]
        public bool OverwriteUrlAllowed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StoreUrlConfiguration {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TransactionNotificationUrl: ").Append(TransactionNotificationUrl).Append("\n");
            sb.Append("  RecurringTransactionNotificationUrl: ").Append(RecurringTransactionNotificationUrl).Append("\n");
            sb.Append("  ResponseSuccessUrl: ").Append(ResponseSuccessUrl).Append("\n");
            sb.Append("  ResponseFailureUrl: ").Append(ResponseFailureUrl).Append("\n");
            sb.Append("  SkipResultPageForSuccess: ").Append(SkipResultPageForSuccess).Append("\n");
            sb.Append("  SkipResultPageForFailure: ").Append(SkipResultPageForFailure).Append("\n");
            sb.Append("  OverwriteUrlAllowed: ").Append(OverwriteUrlAllowed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StoreUrlConfiguration);
        }

        /// <summary>
        /// Returns true if StoreUrlConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of StoreUrlConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoreUrlConfiguration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TransactionNotificationUrl == input.TransactionNotificationUrl ||
                    (this.TransactionNotificationUrl != null &&
                    this.TransactionNotificationUrl.Equals(input.TransactionNotificationUrl))
                ) && 
                (
                    this.RecurringTransactionNotificationUrl == input.RecurringTransactionNotificationUrl ||
                    (this.RecurringTransactionNotificationUrl != null &&
                    this.RecurringTransactionNotificationUrl.Equals(input.RecurringTransactionNotificationUrl))
                ) && 
                (
                    this.ResponseSuccessUrl == input.ResponseSuccessUrl ||
                    (this.ResponseSuccessUrl != null &&
                    this.ResponseSuccessUrl.Equals(input.ResponseSuccessUrl))
                ) && 
                (
                    this.ResponseFailureUrl == input.ResponseFailureUrl ||
                    (this.ResponseFailureUrl != null &&
                    this.ResponseFailureUrl.Equals(input.ResponseFailureUrl))
                ) && 
                (
                    this.SkipResultPageForSuccess == input.SkipResultPageForSuccess ||
                    (this.SkipResultPageForSuccess != null &&
                    this.SkipResultPageForSuccess.Equals(input.SkipResultPageForSuccess))
                ) && 
                (
                    this.SkipResultPageForFailure == input.SkipResultPageForFailure ||
                    (this.SkipResultPageForFailure != null &&
                    this.SkipResultPageForFailure.Equals(input.SkipResultPageForFailure))
                ) && 
                (
                    this.OverwriteUrlAllowed == input.OverwriteUrlAllowed ||
                    (this.OverwriteUrlAllowed != null &&
                    this.OverwriteUrlAllowed.Equals(input.OverwriteUrlAllowed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.TransactionNotificationUrl != null)
                    hashCode = hashCode * 59 + this.TransactionNotificationUrl.GetHashCode();
                if (this.RecurringTransactionNotificationUrl != null)
                    hashCode = hashCode * 59 + this.RecurringTransactionNotificationUrl.GetHashCode();
                if (this.ResponseSuccessUrl != null)
                    hashCode = hashCode * 59 + this.ResponseSuccessUrl.GetHashCode();
                if (this.ResponseFailureUrl != null)
                    hashCode = hashCode * 59 + this.ResponseFailureUrl.GetHashCode();
                if (this.SkipResultPageForSuccess != null)
                    hashCode = hashCode * 59 + this.SkipResultPageForSuccess.GetHashCode();
                if (this.SkipResultPageForFailure != null)
                    hashCode = hashCode * 59 + this.SkipResultPageForFailure.GetHashCode();
                if (this.OverwriteUrlAllowed != null)
                    hashCode = hashCode * 59 + this.OverwriteUrlAllowed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
