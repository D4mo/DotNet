/* 
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 6.12.0.20200605.001
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentSchedulesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel a gateway payment schedule.
        /// </summary>
        /// <remarks>
        /// Use this to cancel an existing gateway payment schedule.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="orderId">Gateway order identifier as returned in the parameter orderId.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId">An optional outlet ID for clients that support multiple stores in the same developer app. (optional)</param>
        /// <returns>PaymentSchedulesResponse</returns>
        PaymentSchedulesResponse CancelPaymentSchedule (string contentType, string clientRequestId, string apiKey, long timestamp, string orderId, string messageSignature = default(string), string region = default(string), string storeId = default(string));

        /// <summary>
        /// Cancel a gateway payment schedule.
        /// </summary>
        /// <remarks>
        /// Use this to cancel an existing gateway payment schedule.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="orderId">Gateway order identifier as returned in the parameter orderId.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId">An optional outlet ID for clients that support multiple stores in the same developer app. (optional)</param>
        /// <returns>ApiResponse of PaymentSchedulesResponse</returns>
        ApiResponse<PaymentSchedulesResponse> CancelPaymentScheduleWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string orderId, string messageSignature = default(string), string region = default(string), string storeId = default(string));
        /// <summary>
        /// Create gateway payment schedule.
        /// </summary>
        /// <remarks>
        /// Use this to create a gateway payment schedule.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentSchedulesRequest">Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>PaymentSchedulesResponse</returns>
        PaymentSchedulesResponse CreatePaymentSchedule (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentSchedulesRequest paymentSchedulesRequest, string messageSignature = default(string), string region = default(string));

        /// <summary>
        /// Create gateway payment schedule.
        /// </summary>
        /// <remarks>
        /// Use this to create a gateway payment schedule.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentSchedulesRequest">Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>ApiResponse of PaymentSchedulesResponse</returns>
        ApiResponse<PaymentSchedulesResponse> CreatePaymentScheduleWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentSchedulesRequest paymentSchedulesRequest, string messageSignature = default(string), string region = default(string));
        /// <summary>
        /// View a gateway payment schedule.
        /// </summary>
        /// <remarks>
        /// Use this to view an existing gateway payment schedule.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="orderId">Gateway order identifier as returned in the parameter orderId.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId">An optional outlet ID for clients that support multiple stores in the same developer app. (optional)</param>
        /// <returns>RecurringPaymentDetailsResponse</returns>
        RecurringPaymentDetailsResponse InquiryPaymentSchedule (string contentType, string clientRequestId, string apiKey, long timestamp, string orderId, string messageSignature = default(string), string region = default(string), string storeId = default(string));

        /// <summary>
        /// View a gateway payment schedule.
        /// </summary>
        /// <remarks>
        /// Use this to view an existing gateway payment schedule.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="orderId">Gateway order identifier as returned in the parameter orderId.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId">An optional outlet ID for clients that support multiple stores in the same developer app. (optional)</param>
        /// <returns>ApiResponse of RecurringPaymentDetailsResponse</returns>
        ApiResponse<RecurringPaymentDetailsResponse> InquiryPaymentScheduleWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string orderId, string messageSignature = default(string), string region = default(string), string storeId = default(string));
        /// <summary>
        /// Update a gateway payment schedule.
        /// </summary>
        /// <remarks>
        /// Use this to update a gateway payment schedule.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="orderId">Gateway order identifier as returned in the parameter orderId.</param>
        /// <param name="paymentSchedulesRequest">Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>PaymentSchedulesResponse</returns>
        PaymentSchedulesResponse UpdatePaymentSchedule (string contentType, string clientRequestId, string apiKey, long timestamp, string orderId, PaymentSchedulesRequest paymentSchedulesRequest, string messageSignature = default(string), string region = default(string));

        /// <summary>
        /// Update a gateway payment schedule.
        /// </summary>
        /// <remarks>
        /// Use this to update a gateway payment schedule.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="orderId">Gateway order identifier as returned in the parameter orderId.</param>
        /// <param name="paymentSchedulesRequest">Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>ApiResponse of PaymentSchedulesResponse</returns>
        ApiResponse<PaymentSchedulesResponse> UpdatePaymentScheduleWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string orderId, PaymentSchedulesRequest paymentSchedulesRequest, string messageSignature = default(string), string region = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Cancel a gateway payment schedule.
        /// </summary>
        /// <remarks>
        /// Use this to cancel an existing gateway payment schedule.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="orderId">Gateway order identifier as returned in the parameter orderId.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId">An optional outlet ID for clients that support multiple stores in the same developer app. (optional)</param>
        /// <returns>Task of PaymentSchedulesResponse</returns>
        System.Threading.Tasks.Task<PaymentSchedulesResponse> CancelPaymentScheduleAsync (string contentType, string clientRequestId, string apiKey, long timestamp, string orderId, string messageSignature = default(string), string region = default(string), string storeId = default(string));

        /// <summary>
        /// Cancel a gateway payment schedule.
        /// </summary>
        /// <remarks>
        /// Use this to cancel an existing gateway payment schedule.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="orderId">Gateway order identifier as returned in the parameter orderId.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId">An optional outlet ID for clients that support multiple stores in the same developer app. (optional)</param>
        /// <returns>Task of ApiResponse (PaymentSchedulesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentSchedulesResponse>> CancelPaymentScheduleAsyncWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string orderId, string messageSignature = default(string), string region = default(string), string storeId = default(string));
        /// <summary>
        /// Create gateway payment schedule.
        /// </summary>
        /// <remarks>
        /// Use this to create a gateway payment schedule.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentSchedulesRequest">Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>Task of PaymentSchedulesResponse</returns>
        System.Threading.Tasks.Task<PaymentSchedulesResponse> CreatePaymentScheduleAsync (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentSchedulesRequest paymentSchedulesRequest, string messageSignature = default(string), string region = default(string));

        /// <summary>
        /// Create gateway payment schedule.
        /// </summary>
        /// <remarks>
        /// Use this to create a gateway payment schedule.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentSchedulesRequest">Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>Task of ApiResponse (PaymentSchedulesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentSchedulesResponse>> CreatePaymentScheduleAsyncWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentSchedulesRequest paymentSchedulesRequest, string messageSignature = default(string), string region = default(string));
        /// <summary>
        /// View a gateway payment schedule.
        /// </summary>
        /// <remarks>
        /// Use this to view an existing gateway payment schedule.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="orderId">Gateway order identifier as returned in the parameter orderId.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId">An optional outlet ID for clients that support multiple stores in the same developer app. (optional)</param>
        /// <returns>Task of RecurringPaymentDetailsResponse</returns>
        System.Threading.Tasks.Task<RecurringPaymentDetailsResponse> InquiryPaymentScheduleAsync (string contentType, string clientRequestId, string apiKey, long timestamp, string orderId, string messageSignature = default(string), string region = default(string), string storeId = default(string));

        /// <summary>
        /// View a gateway payment schedule.
        /// </summary>
        /// <remarks>
        /// Use this to view an existing gateway payment schedule.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="orderId">Gateway order identifier as returned in the parameter orderId.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId">An optional outlet ID for clients that support multiple stores in the same developer app. (optional)</param>
        /// <returns>Task of ApiResponse (RecurringPaymentDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecurringPaymentDetailsResponse>> InquiryPaymentScheduleAsyncWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string orderId, string messageSignature = default(string), string region = default(string), string storeId = default(string));
        /// <summary>
        /// Update a gateway payment schedule.
        /// </summary>
        /// <remarks>
        /// Use this to update a gateway payment schedule.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="orderId">Gateway order identifier as returned in the parameter orderId.</param>
        /// <param name="paymentSchedulesRequest">Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>Task of PaymentSchedulesResponse</returns>
        System.Threading.Tasks.Task<PaymentSchedulesResponse> UpdatePaymentScheduleAsync (string contentType, string clientRequestId, string apiKey, long timestamp, string orderId, PaymentSchedulesRequest paymentSchedulesRequest, string messageSignature = default(string), string region = default(string));

        /// <summary>
        /// Update a gateway payment schedule.
        /// </summary>
        /// <remarks>
        /// Use this to update a gateway payment schedule.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="orderId">Gateway order identifier as returned in the parameter orderId.</param>
        /// <param name="paymentSchedulesRequest">Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>Task of ApiResponse (PaymentSchedulesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentSchedulesResponse>> UpdatePaymentScheduleAsyncWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string orderId, PaymentSchedulesRequest paymentSchedulesRequest, string messageSignature = default(string), string region = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PaymentSchedulesApi : IPaymentSchedulesApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentSchedulesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentSchedulesApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentSchedulesApi"/> class
        /// </summary>
        /// <returns></returns>
        public PaymentSchedulesApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentSchedulesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PaymentSchedulesApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Cancel a gateway payment schedule. Use this to cancel an existing gateway payment schedule.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="orderId">Gateway order identifier as returned in the parameter orderId.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId">An optional outlet ID for clients that support multiple stores in the same developer app. (optional)</param>
        /// <returns>PaymentSchedulesResponse</returns>
        public PaymentSchedulesResponse CancelPaymentSchedule (string contentType, string clientRequestId, string apiKey, long timestamp, string orderId, string messageSignature = default(string), string region = default(string), string storeId = default(string))
        {
             ApiResponse<PaymentSchedulesResponse> localVarResponse = CancelPaymentScheduleWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, orderId, messageSignature, region, storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel a gateway payment schedule. Use this to cancel an existing gateway payment schedule.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="orderId">Gateway order identifier as returned in the parameter orderId.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId">An optional outlet ID for clients that support multiple stores in the same developer app. (optional)</param>
        /// <returns>ApiResponse of PaymentSchedulesResponse</returns>
        public ApiResponse<PaymentSchedulesResponse> CancelPaymentScheduleWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string orderId, string messageSignature = default(string), string region = default(string), string storeId = default(string))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentSchedulesApi->CancelPaymentSchedule");
            // verify the required parameter 'clientRequestId' is set
            if (clientRequestId == null)
                throw new ApiException(400, "Missing required parameter 'clientRequestId' when calling PaymentSchedulesApi->CancelPaymentSchedule");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling PaymentSchedulesApi->CancelPaymentSchedule");
            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new ApiException(400, "Missing required parameter 'timestamp' when calling PaymentSchedulesApi->CancelPaymentSchedule");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling PaymentSchedulesApi->CancelPaymentSchedule");

            var localVarPath = "/payment-schedules/{order-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order-id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientRequestId != null) localVarHeaderParams.Add("Client-Request-Id", this.Configuration.ApiClient.ParameterToString(clientRequestId)); // header parameter
            if (apiKey != null) localVarHeaderParams.Add("Api-Key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter
            if (timestamp != null) localVarHeaderParams.Add("Timestamp", this.Configuration.ApiClient.ParameterToString(timestamp)); // header parameter
            if (messageSignature != null) localVarHeaderParams.Add("Message-Signature", this.Configuration.ApiClient.ParameterToString(messageSignature)); // header parameter
            if (region != null) localVarHeaderParams.Add("Region", this.Configuration.ApiClient.ParameterToString(region)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                RestSharp.Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelPaymentSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentSchedulesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PaymentSchedulesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentSchedulesResponse)));
        }

        /// <summary>
        /// Cancel a gateway payment schedule. Use this to cancel an existing gateway payment schedule.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="orderId">Gateway order identifier as returned in the parameter orderId.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId">An optional outlet ID for clients that support multiple stores in the same developer app. (optional)</param>
        /// <returns>Task of PaymentSchedulesResponse</returns>
        public async System.Threading.Tasks.Task<PaymentSchedulesResponse> CancelPaymentScheduleAsync (string contentType, string clientRequestId, string apiKey, long timestamp, string orderId, string messageSignature = default(string), string region = default(string), string storeId = default(string))
        {
             ApiResponse<PaymentSchedulesResponse> localVarResponse = await CancelPaymentScheduleAsyncWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, orderId, messageSignature, region, storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel a gateway payment schedule. Use this to cancel an existing gateway payment schedule.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="orderId">Gateway order identifier as returned in the parameter orderId.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId">An optional outlet ID for clients that support multiple stores in the same developer app. (optional)</param>
        /// <returns>Task of ApiResponse (PaymentSchedulesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentSchedulesResponse>> CancelPaymentScheduleAsyncWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string orderId, string messageSignature = default(string), string region = default(string), string storeId = default(string))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentSchedulesApi->CancelPaymentSchedule");
            // verify the required parameter 'clientRequestId' is set
            if (clientRequestId == null)
                throw new ApiException(400, "Missing required parameter 'clientRequestId' when calling PaymentSchedulesApi->CancelPaymentSchedule");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling PaymentSchedulesApi->CancelPaymentSchedule");
            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new ApiException(400, "Missing required parameter 'timestamp' when calling PaymentSchedulesApi->CancelPaymentSchedule");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling PaymentSchedulesApi->CancelPaymentSchedule");

            var localVarPath = "/payment-schedules/{order-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order-id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientRequestId != null) localVarHeaderParams.Add("Client-Request-Id", this.Configuration.ApiClient.ParameterToString(clientRequestId)); // header parameter
            if (apiKey != null) localVarHeaderParams.Add("Api-Key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter
            if (timestamp != null) localVarHeaderParams.Add("Timestamp", this.Configuration.ApiClient.ParameterToString(timestamp)); // header parameter
            if (messageSignature != null) localVarHeaderParams.Add("Message-Signature", this.Configuration.ApiClient.ParameterToString(messageSignature)); // header parameter
            if (region != null) localVarHeaderParams.Add("Region", this.Configuration.ApiClient.ParameterToString(region)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                RestSharp.Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelPaymentSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentSchedulesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PaymentSchedulesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentSchedulesResponse)));
        }

        /// <summary>
        /// Create gateway payment schedule. Use this to create a gateway payment schedule.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentSchedulesRequest">Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>PaymentSchedulesResponse</returns>
        public PaymentSchedulesResponse CreatePaymentSchedule (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentSchedulesRequest paymentSchedulesRequest, string messageSignature = default(string), string region = default(string))
        {
             ApiResponse<PaymentSchedulesResponse> localVarResponse = CreatePaymentScheduleWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, paymentSchedulesRequest, messageSignature, region);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create gateway payment schedule. Use this to create a gateway payment schedule.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentSchedulesRequest">Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>ApiResponse of PaymentSchedulesResponse</returns>
        public ApiResponse<PaymentSchedulesResponse> CreatePaymentScheduleWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentSchedulesRequest paymentSchedulesRequest, string messageSignature = default(string), string region = default(string))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentSchedulesApi->CreatePaymentSchedule");
            // verify the required parameter 'clientRequestId' is set
            if (clientRequestId == null)
                throw new ApiException(400, "Missing required parameter 'clientRequestId' when calling PaymentSchedulesApi->CreatePaymentSchedule");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling PaymentSchedulesApi->CreatePaymentSchedule");
            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new ApiException(400, "Missing required parameter 'timestamp' when calling PaymentSchedulesApi->CreatePaymentSchedule");
            // verify the required parameter 'paymentSchedulesRequest' is set
            if (paymentSchedulesRequest == null)
                throw new ApiException(400, "Missing required parameter 'paymentSchedulesRequest' when calling PaymentSchedulesApi->CreatePaymentSchedule");

            var localVarPath = "/payment-schedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientRequestId != null) localVarHeaderParams.Add("Client-Request-Id", this.Configuration.ApiClient.ParameterToString(clientRequestId)); // header parameter
            if (apiKey != null) localVarHeaderParams.Add("Api-Key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter
            if (timestamp != null) localVarHeaderParams.Add("Timestamp", this.Configuration.ApiClient.ParameterToString(timestamp)); // header parameter
            if (messageSignature != null) localVarHeaderParams.Add("Message-Signature", this.Configuration.ApiClient.ParameterToString(messageSignature)); // header parameter
            if (region != null) localVarHeaderParams.Add("Region", this.Configuration.ApiClient.ParameterToString(region)); // header parameter
            if (paymentSchedulesRequest != null && paymentSchedulesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(paymentSchedulesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paymentSchedulesRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                RestSharp.Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePaymentSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentSchedulesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PaymentSchedulesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentSchedulesResponse)));
        }

        /// <summary>
        /// Create gateway payment schedule. Use this to create a gateway payment schedule.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentSchedulesRequest">Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>Task of PaymentSchedulesResponse</returns>
        public async System.Threading.Tasks.Task<PaymentSchedulesResponse> CreatePaymentScheduleAsync (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentSchedulesRequest paymentSchedulesRequest, string messageSignature = default(string), string region = default(string))
        {
             ApiResponse<PaymentSchedulesResponse> localVarResponse = await CreatePaymentScheduleAsyncWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, paymentSchedulesRequest, messageSignature, region);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create gateway payment schedule. Use this to create a gateway payment schedule.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentSchedulesRequest">Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>Task of ApiResponse (PaymentSchedulesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentSchedulesResponse>> CreatePaymentScheduleAsyncWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentSchedulesRequest paymentSchedulesRequest, string messageSignature = default(string), string region = default(string))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentSchedulesApi->CreatePaymentSchedule");
            // verify the required parameter 'clientRequestId' is set
            if (clientRequestId == null)
                throw new ApiException(400, "Missing required parameter 'clientRequestId' when calling PaymentSchedulesApi->CreatePaymentSchedule");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling PaymentSchedulesApi->CreatePaymentSchedule");
            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new ApiException(400, "Missing required parameter 'timestamp' when calling PaymentSchedulesApi->CreatePaymentSchedule");
            // verify the required parameter 'paymentSchedulesRequest' is set
            if (paymentSchedulesRequest == null)
                throw new ApiException(400, "Missing required parameter 'paymentSchedulesRequest' when calling PaymentSchedulesApi->CreatePaymentSchedule");

            var localVarPath = "/payment-schedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientRequestId != null) localVarHeaderParams.Add("Client-Request-Id", this.Configuration.ApiClient.ParameterToString(clientRequestId)); // header parameter
            if (apiKey != null) localVarHeaderParams.Add("Api-Key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter
            if (timestamp != null) localVarHeaderParams.Add("Timestamp", this.Configuration.ApiClient.ParameterToString(timestamp)); // header parameter
            if (messageSignature != null) localVarHeaderParams.Add("Message-Signature", this.Configuration.ApiClient.ParameterToString(messageSignature)); // header parameter
            if (region != null) localVarHeaderParams.Add("Region", this.Configuration.ApiClient.ParameterToString(region)); // header parameter
            if (paymentSchedulesRequest != null && paymentSchedulesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(paymentSchedulesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paymentSchedulesRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                RestSharp.Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePaymentSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentSchedulesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PaymentSchedulesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentSchedulesResponse)));
        }

        /// <summary>
        /// View a gateway payment schedule. Use this to view an existing gateway payment schedule.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="orderId">Gateway order identifier as returned in the parameter orderId.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId">An optional outlet ID for clients that support multiple stores in the same developer app. (optional)</param>
        /// <returns>RecurringPaymentDetailsResponse</returns>
        public RecurringPaymentDetailsResponse InquiryPaymentSchedule (string contentType, string clientRequestId, string apiKey, long timestamp, string orderId, string messageSignature = default(string), string region = default(string), string storeId = default(string))
        {
             ApiResponse<RecurringPaymentDetailsResponse> localVarResponse = InquiryPaymentScheduleWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, orderId, messageSignature, region, storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View a gateway payment schedule. Use this to view an existing gateway payment schedule.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="orderId">Gateway order identifier as returned in the parameter orderId.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId">An optional outlet ID for clients that support multiple stores in the same developer app. (optional)</param>
        /// <returns>ApiResponse of RecurringPaymentDetailsResponse</returns>
        public ApiResponse<RecurringPaymentDetailsResponse> InquiryPaymentScheduleWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string orderId, string messageSignature = default(string), string region = default(string), string storeId = default(string))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentSchedulesApi->InquiryPaymentSchedule");
            // verify the required parameter 'clientRequestId' is set
            if (clientRequestId == null)
                throw new ApiException(400, "Missing required parameter 'clientRequestId' when calling PaymentSchedulesApi->InquiryPaymentSchedule");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling PaymentSchedulesApi->InquiryPaymentSchedule");
            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new ApiException(400, "Missing required parameter 'timestamp' when calling PaymentSchedulesApi->InquiryPaymentSchedule");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling PaymentSchedulesApi->InquiryPaymentSchedule");

            var localVarPath = "/payment-schedules/{order-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order-id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientRequestId != null) localVarHeaderParams.Add("Client-Request-Id", this.Configuration.ApiClient.ParameterToString(clientRequestId)); // header parameter
            if (apiKey != null) localVarHeaderParams.Add("Api-Key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter
            if (timestamp != null) localVarHeaderParams.Add("Timestamp", this.Configuration.ApiClient.ParameterToString(timestamp)); // header parameter
            if (messageSignature != null) localVarHeaderParams.Add("Message-Signature", this.Configuration.ApiClient.ParameterToString(messageSignature)); // header parameter
            if (region != null) localVarHeaderParams.Add("Region", this.Configuration.ApiClient.ParameterToString(region)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                RestSharp.Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InquiryPaymentSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecurringPaymentDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RecurringPaymentDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecurringPaymentDetailsResponse)));
        }

        /// <summary>
        /// View a gateway payment schedule. Use this to view an existing gateway payment schedule.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="orderId">Gateway order identifier as returned in the parameter orderId.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId">An optional outlet ID for clients that support multiple stores in the same developer app. (optional)</param>
        /// <returns>Task of RecurringPaymentDetailsResponse</returns>
        public async System.Threading.Tasks.Task<RecurringPaymentDetailsResponse> InquiryPaymentScheduleAsync (string contentType, string clientRequestId, string apiKey, long timestamp, string orderId, string messageSignature = default(string), string region = default(string), string storeId = default(string))
        {
             ApiResponse<RecurringPaymentDetailsResponse> localVarResponse = await InquiryPaymentScheduleAsyncWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, orderId, messageSignature, region, storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View a gateway payment schedule. Use this to view an existing gateway payment schedule.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="orderId">Gateway order identifier as returned in the parameter orderId.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId">An optional outlet ID for clients that support multiple stores in the same developer app. (optional)</param>
        /// <returns>Task of ApiResponse (RecurringPaymentDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RecurringPaymentDetailsResponse>> InquiryPaymentScheduleAsyncWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string orderId, string messageSignature = default(string), string region = default(string), string storeId = default(string))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentSchedulesApi->InquiryPaymentSchedule");
            // verify the required parameter 'clientRequestId' is set
            if (clientRequestId == null)
                throw new ApiException(400, "Missing required parameter 'clientRequestId' when calling PaymentSchedulesApi->InquiryPaymentSchedule");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling PaymentSchedulesApi->InquiryPaymentSchedule");
            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new ApiException(400, "Missing required parameter 'timestamp' when calling PaymentSchedulesApi->InquiryPaymentSchedule");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling PaymentSchedulesApi->InquiryPaymentSchedule");

            var localVarPath = "/payment-schedules/{order-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order-id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientRequestId != null) localVarHeaderParams.Add("Client-Request-Id", this.Configuration.ApiClient.ParameterToString(clientRequestId)); // header parameter
            if (apiKey != null) localVarHeaderParams.Add("Api-Key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter
            if (timestamp != null) localVarHeaderParams.Add("Timestamp", this.Configuration.ApiClient.ParameterToString(timestamp)); // header parameter
            if (messageSignature != null) localVarHeaderParams.Add("Message-Signature", this.Configuration.ApiClient.ParameterToString(messageSignature)); // header parameter
            if (region != null) localVarHeaderParams.Add("Region", this.Configuration.ApiClient.ParameterToString(region)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                RestSharp.Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InquiryPaymentSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecurringPaymentDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RecurringPaymentDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecurringPaymentDetailsResponse)));
        }

        /// <summary>
        /// Update a gateway payment schedule. Use this to update a gateway payment schedule.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="orderId">Gateway order identifier as returned in the parameter orderId.</param>
        /// <param name="paymentSchedulesRequest">Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>PaymentSchedulesResponse</returns>
        public PaymentSchedulesResponse UpdatePaymentSchedule (string contentType, string clientRequestId, string apiKey, long timestamp, string orderId, PaymentSchedulesRequest paymentSchedulesRequest, string messageSignature = default(string), string region = default(string))
        {
             ApiResponse<PaymentSchedulesResponse> localVarResponse = UpdatePaymentScheduleWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, orderId, paymentSchedulesRequest, messageSignature, region);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a gateway payment schedule. Use this to update a gateway payment schedule.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="orderId">Gateway order identifier as returned in the parameter orderId.</param>
        /// <param name="paymentSchedulesRequest">Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>ApiResponse of PaymentSchedulesResponse</returns>
        public ApiResponse<PaymentSchedulesResponse> UpdatePaymentScheduleWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string orderId, PaymentSchedulesRequest paymentSchedulesRequest, string messageSignature = default(string), string region = default(string))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentSchedulesApi->UpdatePaymentSchedule");
            // verify the required parameter 'clientRequestId' is set
            if (clientRequestId == null)
                throw new ApiException(400, "Missing required parameter 'clientRequestId' when calling PaymentSchedulesApi->UpdatePaymentSchedule");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling PaymentSchedulesApi->UpdatePaymentSchedule");
            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new ApiException(400, "Missing required parameter 'timestamp' when calling PaymentSchedulesApi->UpdatePaymentSchedule");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling PaymentSchedulesApi->UpdatePaymentSchedule");
            // verify the required parameter 'paymentSchedulesRequest' is set
            if (paymentSchedulesRequest == null)
                throw new ApiException(400, "Missing required parameter 'paymentSchedulesRequest' when calling PaymentSchedulesApi->UpdatePaymentSchedule");

            var localVarPath = "/payment-schedules/{order-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order-id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientRequestId != null) localVarHeaderParams.Add("Client-Request-Id", this.Configuration.ApiClient.ParameterToString(clientRequestId)); // header parameter
            if (apiKey != null) localVarHeaderParams.Add("Api-Key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter
            if (timestamp != null) localVarHeaderParams.Add("Timestamp", this.Configuration.ApiClient.ParameterToString(timestamp)); // header parameter
            if (messageSignature != null) localVarHeaderParams.Add("Message-Signature", this.Configuration.ApiClient.ParameterToString(messageSignature)); // header parameter
            if (region != null) localVarHeaderParams.Add("Region", this.Configuration.ApiClient.ParameterToString(region)); // header parameter
            if (paymentSchedulesRequest != null && paymentSchedulesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(paymentSchedulesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paymentSchedulesRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                RestSharp.Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePaymentSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentSchedulesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PaymentSchedulesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentSchedulesResponse)));
        }

        /// <summary>
        /// Update a gateway payment schedule. Use this to update a gateway payment schedule.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="orderId">Gateway order identifier as returned in the parameter orderId.</param>
        /// <param name="paymentSchedulesRequest">Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>Task of PaymentSchedulesResponse</returns>
        public async System.Threading.Tasks.Task<PaymentSchedulesResponse> UpdatePaymentScheduleAsync (string contentType, string clientRequestId, string apiKey, long timestamp, string orderId, PaymentSchedulesRequest paymentSchedulesRequest, string messageSignature = default(string), string region = default(string))
        {
             ApiResponse<PaymentSchedulesResponse> localVarResponse = await UpdatePaymentScheduleAsyncWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, orderId, paymentSchedulesRequest, messageSignature, region);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a gateway payment schedule. Use this to update a gateway payment schedule.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="orderId">Gateway order identifier as returned in the parameter orderId.</param>
        /// <param name="paymentSchedulesRequest">Accepted request types: PaymentMethodPaymentSchedulesRequest and ReferencedOrderPaymentSchedulesRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>Task of ApiResponse (PaymentSchedulesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentSchedulesResponse>> UpdatePaymentScheduleAsyncWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string orderId, PaymentSchedulesRequest paymentSchedulesRequest, string messageSignature = default(string), string region = default(string))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentSchedulesApi->UpdatePaymentSchedule");
            // verify the required parameter 'clientRequestId' is set
            if (clientRequestId == null)
                throw new ApiException(400, "Missing required parameter 'clientRequestId' when calling PaymentSchedulesApi->UpdatePaymentSchedule");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling PaymentSchedulesApi->UpdatePaymentSchedule");
            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new ApiException(400, "Missing required parameter 'timestamp' when calling PaymentSchedulesApi->UpdatePaymentSchedule");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling PaymentSchedulesApi->UpdatePaymentSchedule");
            // verify the required parameter 'paymentSchedulesRequest' is set
            if (paymentSchedulesRequest == null)
                throw new ApiException(400, "Missing required parameter 'paymentSchedulesRequest' when calling PaymentSchedulesApi->UpdatePaymentSchedule");

            var localVarPath = "/payment-schedules/{order-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order-id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientRequestId != null) localVarHeaderParams.Add("Client-Request-Id", this.Configuration.ApiClient.ParameterToString(clientRequestId)); // header parameter
            if (apiKey != null) localVarHeaderParams.Add("Api-Key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter
            if (timestamp != null) localVarHeaderParams.Add("Timestamp", this.Configuration.ApiClient.ParameterToString(timestamp)); // header parameter
            if (messageSignature != null) localVarHeaderParams.Add("Message-Signature", this.Configuration.ApiClient.ParameterToString(messageSignature)); // header parameter
            if (region != null) localVarHeaderParams.Add("Region", this.Configuration.ApiClient.ParameterToString(region)); // header parameter
            if (paymentSchedulesRequest != null && paymentSchedulesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(paymentSchedulesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paymentSchedulesRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                RestSharp.Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePaymentSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentSchedulesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PaymentSchedulesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentSchedulesResponse)));
        }

    }
}
