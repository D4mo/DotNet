/* 
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 6.12.0.20200605.001
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentTokenApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a payment token from a payment card.
        /// </summary>
        /// <remarks>
        /// Use this to create a payment token from a payment card.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentTokenizationRequest">Accepted request types: PaymentCardPaymentTokenizationRequest, PaymentDevicePaymentTokenizationRequest, and ReferencedOrderPaymentTokenizationRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>PaymentTokenizationResponse</returns>
        PaymentTokenizationResponse CreatePaymentToken (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentTokenizationRequest paymentTokenizationRequest, string messageSignature = default(string), string authorization = default(string), string region = default(string));

        /// <summary>
        /// Create a payment token from a payment card.
        /// </summary>
        /// <remarks>
        /// Use this to create a payment token from a payment card.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentTokenizationRequest">Accepted request types: PaymentCardPaymentTokenizationRequest, PaymentDevicePaymentTokenizationRequest, and ReferencedOrderPaymentTokenizationRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>ApiResponse of PaymentTokenizationResponse</returns>
        ApiResponse<PaymentTokenizationResponse> CreatePaymentTokenWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentTokenizationRequest paymentTokenizationRequest, string messageSignature = default(string), string authorization = default(string), string region = default(string));
        /// <summary>
        /// Delete a payment token.
        /// </summary>
        /// <remarks>
        /// Use this to delete a payment token.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="tokenId">Identifies a payment token.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <returns>PaymentTokenizationResponse</returns>
        PaymentTokenizationResponse DeletePaymentToken (string contentType, string clientRequestId, string apiKey, long timestamp, string tokenId, string messageSignature = default(string), string authorization = default(string), string region = default(string), string storeId = default(string));

        /// <summary>
        /// Delete a payment token.
        /// </summary>
        /// <remarks>
        /// Use this to delete a payment token.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="tokenId">Identifies a payment token.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <returns>ApiResponse of PaymentTokenizationResponse</returns>
        ApiResponse<PaymentTokenizationResponse> DeletePaymentTokenWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string tokenId, string messageSignature = default(string), string authorization = default(string), string region = default(string), string storeId = default(string));
        /// <summary>
        /// Get payment card details associated with token.
        /// </summary>
        /// <remarks>
        /// Get payment card details associated with token.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="tokenId">Identifies a payment token.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <returns>PaymentTokenizationResponse</returns>
        PaymentTokenizationResponse GetPaymentTokenDetails (string contentType, string clientRequestId, string apiKey, long timestamp, string tokenId, string messageSignature = default(string), string authorization = default(string), string region = default(string), string storeId = default(string));

        /// <summary>
        /// Get payment card details associated with token.
        /// </summary>
        /// <remarks>
        /// Get payment card details associated with token.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="tokenId">Identifies a payment token.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <returns>ApiResponse of PaymentTokenizationResponse</returns>
        ApiResponse<PaymentTokenizationResponse> GetPaymentTokenDetailsWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string tokenId, string messageSignature = default(string), string authorization = default(string), string region = default(string), string storeId = default(string));
        /// <summary>
        /// Update one or more payment tokens.
        /// </summary>
        /// <remarks>
        /// Use this update one or more payment tokens.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentCardPaymentTokenUpdateRequest">Accepted request type: PaymentCardPaymentTokenUpdateRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>PaymentTokenUpdateResponse</returns>
        PaymentTokenUpdateResponse UpdatePaymentToken (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentCardPaymentTokenUpdateRequest paymentCardPaymentTokenUpdateRequest, string messageSignature = default(string), string authorization = default(string), string region = default(string));

        /// <summary>
        /// Update one or more payment tokens.
        /// </summary>
        /// <remarks>
        /// Use this update one or more payment tokens.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentCardPaymentTokenUpdateRequest">Accepted request type: PaymentCardPaymentTokenUpdateRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>ApiResponse of PaymentTokenUpdateResponse</returns>
        ApiResponse<PaymentTokenUpdateResponse> UpdatePaymentTokenWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentCardPaymentTokenUpdateRequest paymentCardPaymentTokenUpdateRequest, string messageSignature = default(string), string authorization = default(string), string region = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a payment token from a payment card.
        /// </summary>
        /// <remarks>
        /// Use this to create a payment token from a payment card.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentTokenizationRequest">Accepted request types: PaymentCardPaymentTokenizationRequest, PaymentDevicePaymentTokenizationRequest, and ReferencedOrderPaymentTokenizationRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>Task of PaymentTokenizationResponse</returns>
        System.Threading.Tasks.Task<PaymentTokenizationResponse> CreatePaymentTokenAsync (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentTokenizationRequest paymentTokenizationRequest, string messageSignature = default(string), string authorization = default(string), string region = default(string));

        /// <summary>
        /// Create a payment token from a payment card.
        /// </summary>
        /// <remarks>
        /// Use this to create a payment token from a payment card.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentTokenizationRequest">Accepted request types: PaymentCardPaymentTokenizationRequest, PaymentDevicePaymentTokenizationRequest, and ReferencedOrderPaymentTokenizationRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>Task of ApiResponse (PaymentTokenizationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentTokenizationResponse>> CreatePaymentTokenAsyncWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentTokenizationRequest paymentTokenizationRequest, string messageSignature = default(string), string authorization = default(string), string region = default(string));
        /// <summary>
        /// Delete a payment token.
        /// </summary>
        /// <remarks>
        /// Use this to delete a payment token.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="tokenId">Identifies a payment token.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <returns>Task of PaymentTokenizationResponse</returns>
        System.Threading.Tasks.Task<PaymentTokenizationResponse> DeletePaymentTokenAsync (string contentType, string clientRequestId, string apiKey, long timestamp, string tokenId, string messageSignature = default(string), string authorization = default(string), string region = default(string), string storeId = default(string));

        /// <summary>
        /// Delete a payment token.
        /// </summary>
        /// <remarks>
        /// Use this to delete a payment token.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="tokenId">Identifies a payment token.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <returns>Task of ApiResponse (PaymentTokenizationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentTokenizationResponse>> DeletePaymentTokenAsyncWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string tokenId, string messageSignature = default(string), string authorization = default(string), string region = default(string), string storeId = default(string));
        /// <summary>
        /// Get payment card details associated with token.
        /// </summary>
        /// <remarks>
        /// Get payment card details associated with token.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="tokenId">Identifies a payment token.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <returns>Task of PaymentTokenizationResponse</returns>
        System.Threading.Tasks.Task<PaymentTokenizationResponse> GetPaymentTokenDetailsAsync (string contentType, string clientRequestId, string apiKey, long timestamp, string tokenId, string messageSignature = default(string), string authorization = default(string), string region = default(string), string storeId = default(string));

        /// <summary>
        /// Get payment card details associated with token.
        /// </summary>
        /// <remarks>
        /// Get payment card details associated with token.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="tokenId">Identifies a payment token.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <returns>Task of ApiResponse (PaymentTokenizationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentTokenizationResponse>> GetPaymentTokenDetailsAsyncWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string tokenId, string messageSignature = default(string), string authorization = default(string), string region = default(string), string storeId = default(string));
        /// <summary>
        /// Update one or more payment tokens.
        /// </summary>
        /// <remarks>
        /// Use this update one or more payment tokens.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentCardPaymentTokenUpdateRequest">Accepted request type: PaymentCardPaymentTokenUpdateRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>Task of PaymentTokenUpdateResponse</returns>
        System.Threading.Tasks.Task<PaymentTokenUpdateResponse> UpdatePaymentTokenAsync (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentCardPaymentTokenUpdateRequest paymentCardPaymentTokenUpdateRequest, string messageSignature = default(string), string authorization = default(string), string region = default(string));

        /// <summary>
        /// Update one or more payment tokens.
        /// </summary>
        /// <remarks>
        /// Use this update one or more payment tokens.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentCardPaymentTokenUpdateRequest">Accepted request type: PaymentCardPaymentTokenUpdateRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>Task of ApiResponse (PaymentTokenUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentTokenUpdateResponse>> UpdatePaymentTokenAsyncWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentCardPaymentTokenUpdateRequest paymentCardPaymentTokenUpdateRequest, string messageSignature = default(string), string authorization = default(string), string region = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PaymentTokenApi : IPaymentTokenApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentTokenApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentTokenApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentTokenApi"/> class
        /// </summary>
        /// <returns></returns>
        public PaymentTokenApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentTokenApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PaymentTokenApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a payment token from a payment card. Use this to create a payment token from a payment card.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentTokenizationRequest">Accepted request types: PaymentCardPaymentTokenizationRequest, PaymentDevicePaymentTokenizationRequest, and ReferencedOrderPaymentTokenizationRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>PaymentTokenizationResponse</returns>
        public PaymentTokenizationResponse CreatePaymentToken (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentTokenizationRequest paymentTokenizationRequest, string messageSignature = default(string), string authorization = default(string), string region = default(string))
        {
             ApiResponse<PaymentTokenizationResponse> localVarResponse = CreatePaymentTokenWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, paymentTokenizationRequest, messageSignature, authorization, region);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a payment token from a payment card. Use this to create a payment token from a payment card.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentTokenizationRequest">Accepted request types: PaymentCardPaymentTokenizationRequest, PaymentDevicePaymentTokenizationRequest, and ReferencedOrderPaymentTokenizationRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>ApiResponse of PaymentTokenizationResponse</returns>
        public ApiResponse<PaymentTokenizationResponse> CreatePaymentTokenWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentTokenizationRequest paymentTokenizationRequest, string messageSignature = default(string), string authorization = default(string), string region = default(string))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentTokenApi->CreatePaymentToken");
            // verify the required parameter 'clientRequestId' is set
            if (clientRequestId == null)
                throw new ApiException(400, "Missing required parameter 'clientRequestId' when calling PaymentTokenApi->CreatePaymentToken");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling PaymentTokenApi->CreatePaymentToken");
            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new ApiException(400, "Missing required parameter 'timestamp' when calling PaymentTokenApi->CreatePaymentToken");
            // verify the required parameter 'paymentTokenizationRequest' is set
            if (paymentTokenizationRequest == null)
                throw new ApiException(400, "Missing required parameter 'paymentTokenizationRequest' when calling PaymentTokenApi->CreatePaymentToken");

            var localVarPath = "/payment-tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientRequestId != null) localVarHeaderParams.Add("Client-Request-Id", this.Configuration.ApiClient.ParameterToString(clientRequestId)); // header parameter
            if (apiKey != null) localVarHeaderParams.Add("Api-Key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter
            if (timestamp != null) localVarHeaderParams.Add("Timestamp", this.Configuration.ApiClient.ParameterToString(timestamp)); // header parameter
            if (messageSignature != null) localVarHeaderParams.Add("Message-Signature", this.Configuration.ApiClient.ParameterToString(messageSignature)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (region != null) localVarHeaderParams.Add("Region", this.Configuration.ApiClient.ParameterToString(region)); // header parameter
            if (paymentTokenizationRequest != null && paymentTokenizationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(paymentTokenizationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paymentTokenizationRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                RestSharp.Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePaymentToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentTokenizationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PaymentTokenizationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentTokenizationResponse)));
        }

        /// <summary>
        /// Create a payment token from a payment card. Use this to create a payment token from a payment card.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentTokenizationRequest">Accepted request types: PaymentCardPaymentTokenizationRequest, PaymentDevicePaymentTokenizationRequest, and ReferencedOrderPaymentTokenizationRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>Task of PaymentTokenizationResponse</returns>
        public async System.Threading.Tasks.Task<PaymentTokenizationResponse> CreatePaymentTokenAsync (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentTokenizationRequest paymentTokenizationRequest, string messageSignature = default(string), string authorization = default(string), string region = default(string))
        {
             ApiResponse<PaymentTokenizationResponse> localVarResponse = await CreatePaymentTokenAsyncWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, paymentTokenizationRequest, messageSignature, authorization, region);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a payment token from a payment card. Use this to create a payment token from a payment card.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentTokenizationRequest">Accepted request types: PaymentCardPaymentTokenizationRequest, PaymentDevicePaymentTokenizationRequest, and ReferencedOrderPaymentTokenizationRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>Task of ApiResponse (PaymentTokenizationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentTokenizationResponse>> CreatePaymentTokenAsyncWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentTokenizationRequest paymentTokenizationRequest, string messageSignature = default(string), string authorization = default(string), string region = default(string))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentTokenApi->CreatePaymentToken");
            // verify the required parameter 'clientRequestId' is set
            if (clientRequestId == null)
                throw new ApiException(400, "Missing required parameter 'clientRequestId' when calling PaymentTokenApi->CreatePaymentToken");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling PaymentTokenApi->CreatePaymentToken");
            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new ApiException(400, "Missing required parameter 'timestamp' when calling PaymentTokenApi->CreatePaymentToken");
            // verify the required parameter 'paymentTokenizationRequest' is set
            if (paymentTokenizationRequest == null)
                throw new ApiException(400, "Missing required parameter 'paymentTokenizationRequest' when calling PaymentTokenApi->CreatePaymentToken");

            var localVarPath = "/payment-tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientRequestId != null) localVarHeaderParams.Add("Client-Request-Id", this.Configuration.ApiClient.ParameterToString(clientRequestId)); // header parameter
            if (apiKey != null) localVarHeaderParams.Add("Api-Key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter
            if (timestamp != null) localVarHeaderParams.Add("Timestamp", this.Configuration.ApiClient.ParameterToString(timestamp)); // header parameter
            if (messageSignature != null) localVarHeaderParams.Add("Message-Signature", this.Configuration.ApiClient.ParameterToString(messageSignature)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (region != null) localVarHeaderParams.Add("Region", this.Configuration.ApiClient.ParameterToString(region)); // header parameter
            if (paymentTokenizationRequest != null && paymentTokenizationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(paymentTokenizationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paymentTokenizationRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                RestSharp.Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePaymentToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentTokenizationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PaymentTokenizationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentTokenizationResponse)));
        }

        /// <summary>
        /// Delete a payment token. Use this to delete a payment token.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="tokenId">Identifies a payment token.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <returns>PaymentTokenizationResponse</returns>
        public PaymentTokenizationResponse DeletePaymentToken (string contentType, string clientRequestId, string apiKey, long timestamp, string tokenId, string messageSignature = default(string), string authorization = default(string), string region = default(string), string storeId = default(string))
        {
             ApiResponse<PaymentTokenizationResponse> localVarResponse = DeletePaymentTokenWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, tokenId, messageSignature, authorization, region, storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a payment token. Use this to delete a payment token.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="tokenId">Identifies a payment token.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <returns>ApiResponse of PaymentTokenizationResponse</returns>
        public ApiResponse<PaymentTokenizationResponse> DeletePaymentTokenWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string tokenId, string messageSignature = default(string), string authorization = default(string), string region = default(string), string storeId = default(string))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentTokenApi->DeletePaymentToken");
            // verify the required parameter 'clientRequestId' is set
            if (clientRequestId == null)
                throw new ApiException(400, "Missing required parameter 'clientRequestId' when calling PaymentTokenApi->DeletePaymentToken");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling PaymentTokenApi->DeletePaymentToken");
            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new ApiException(400, "Missing required parameter 'timestamp' when calling PaymentTokenApi->DeletePaymentToken");
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling PaymentTokenApi->DeletePaymentToken");

            var localVarPath = "/payment-tokens/{token-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenId != null) localVarPathParams.Add("token-id", this.Configuration.ApiClient.ParameterToString(tokenId)); // path parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientRequestId != null) localVarHeaderParams.Add("Client-Request-Id", this.Configuration.ApiClient.ParameterToString(clientRequestId)); // header parameter
            if (apiKey != null) localVarHeaderParams.Add("Api-Key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter
            if (timestamp != null) localVarHeaderParams.Add("Timestamp", this.Configuration.ApiClient.ParameterToString(timestamp)); // header parameter
            if (messageSignature != null) localVarHeaderParams.Add("Message-Signature", this.Configuration.ApiClient.ParameterToString(messageSignature)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (region != null) localVarHeaderParams.Add("Region", this.Configuration.ApiClient.ParameterToString(region)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                RestSharp.Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePaymentToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentTokenizationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PaymentTokenizationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentTokenizationResponse)));
        }

        /// <summary>
        /// Delete a payment token. Use this to delete a payment token.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="tokenId">Identifies a payment token.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <returns>Task of PaymentTokenizationResponse</returns>
        public async System.Threading.Tasks.Task<PaymentTokenizationResponse> DeletePaymentTokenAsync (string contentType, string clientRequestId, string apiKey, long timestamp, string tokenId, string messageSignature = default(string), string authorization = default(string), string region = default(string), string storeId = default(string))
        {
             ApiResponse<PaymentTokenizationResponse> localVarResponse = await DeletePaymentTokenAsyncWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, tokenId, messageSignature, authorization, region, storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a payment token. Use this to delete a payment token.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="tokenId">Identifies a payment token.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <returns>Task of ApiResponse (PaymentTokenizationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentTokenizationResponse>> DeletePaymentTokenAsyncWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string tokenId, string messageSignature = default(string), string authorization = default(string), string region = default(string), string storeId = default(string))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentTokenApi->DeletePaymentToken");
            // verify the required parameter 'clientRequestId' is set
            if (clientRequestId == null)
                throw new ApiException(400, "Missing required parameter 'clientRequestId' when calling PaymentTokenApi->DeletePaymentToken");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling PaymentTokenApi->DeletePaymentToken");
            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new ApiException(400, "Missing required parameter 'timestamp' when calling PaymentTokenApi->DeletePaymentToken");
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling PaymentTokenApi->DeletePaymentToken");

            var localVarPath = "/payment-tokens/{token-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenId != null) localVarPathParams.Add("token-id", this.Configuration.ApiClient.ParameterToString(tokenId)); // path parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientRequestId != null) localVarHeaderParams.Add("Client-Request-Id", this.Configuration.ApiClient.ParameterToString(clientRequestId)); // header parameter
            if (apiKey != null) localVarHeaderParams.Add("Api-Key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter
            if (timestamp != null) localVarHeaderParams.Add("Timestamp", this.Configuration.ApiClient.ParameterToString(timestamp)); // header parameter
            if (messageSignature != null) localVarHeaderParams.Add("Message-Signature", this.Configuration.ApiClient.ParameterToString(messageSignature)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (region != null) localVarHeaderParams.Add("Region", this.Configuration.ApiClient.ParameterToString(region)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                RestSharp.Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePaymentToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentTokenizationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PaymentTokenizationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentTokenizationResponse)));
        }

        /// <summary>
        /// Get payment card details associated with token. Get payment card details associated with token.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="tokenId">Identifies a payment token.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <returns>PaymentTokenizationResponse</returns>
        public PaymentTokenizationResponse GetPaymentTokenDetails (string contentType, string clientRequestId, string apiKey, long timestamp, string tokenId, string messageSignature = default(string), string authorization = default(string), string region = default(string), string storeId = default(string))
        {
             ApiResponse<PaymentTokenizationResponse> localVarResponse = GetPaymentTokenDetailsWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, tokenId, messageSignature, authorization, region, storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get payment card details associated with token. Get payment card details associated with token.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="tokenId">Identifies a payment token.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <returns>ApiResponse of PaymentTokenizationResponse</returns>
        public ApiResponse<PaymentTokenizationResponse> GetPaymentTokenDetailsWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string tokenId, string messageSignature = default(string), string authorization = default(string), string region = default(string), string storeId = default(string))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentTokenApi->GetPaymentTokenDetails");
            // verify the required parameter 'clientRequestId' is set
            if (clientRequestId == null)
                throw new ApiException(400, "Missing required parameter 'clientRequestId' when calling PaymentTokenApi->GetPaymentTokenDetails");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling PaymentTokenApi->GetPaymentTokenDetails");
            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new ApiException(400, "Missing required parameter 'timestamp' when calling PaymentTokenApi->GetPaymentTokenDetails");
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling PaymentTokenApi->GetPaymentTokenDetails");

            var localVarPath = "/payment-tokens/{token-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenId != null) localVarPathParams.Add("token-id", this.Configuration.ApiClient.ParameterToString(tokenId)); // path parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientRequestId != null) localVarHeaderParams.Add("Client-Request-Id", this.Configuration.ApiClient.ParameterToString(clientRequestId)); // header parameter
            if (apiKey != null) localVarHeaderParams.Add("Api-Key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter
            if (timestamp != null) localVarHeaderParams.Add("Timestamp", this.Configuration.ApiClient.ParameterToString(timestamp)); // header parameter
            if (messageSignature != null) localVarHeaderParams.Add("Message-Signature", this.Configuration.ApiClient.ParameterToString(messageSignature)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (region != null) localVarHeaderParams.Add("Region", this.Configuration.ApiClient.ParameterToString(region)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                RestSharp.Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaymentTokenDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentTokenizationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PaymentTokenizationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentTokenizationResponse)));
        }

        /// <summary>
        /// Get payment card details associated with token. Get payment card details associated with token.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="tokenId">Identifies a payment token.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <returns>Task of PaymentTokenizationResponse</returns>
        public async System.Threading.Tasks.Task<PaymentTokenizationResponse> GetPaymentTokenDetailsAsync (string contentType, string clientRequestId, string apiKey, long timestamp, string tokenId, string messageSignature = default(string), string authorization = default(string), string region = default(string), string storeId = default(string))
        {
             ApiResponse<PaymentTokenizationResponse> localVarResponse = await GetPaymentTokenDetailsAsyncWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, tokenId, messageSignature, authorization, region, storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get payment card details associated with token. Get payment card details associated with token.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="tokenId">Identifies a payment token.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <returns>Task of ApiResponse (PaymentTokenizationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentTokenizationResponse>> GetPaymentTokenDetailsAsyncWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string tokenId, string messageSignature = default(string), string authorization = default(string), string region = default(string), string storeId = default(string))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentTokenApi->GetPaymentTokenDetails");
            // verify the required parameter 'clientRequestId' is set
            if (clientRequestId == null)
                throw new ApiException(400, "Missing required parameter 'clientRequestId' when calling PaymentTokenApi->GetPaymentTokenDetails");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling PaymentTokenApi->GetPaymentTokenDetails");
            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new ApiException(400, "Missing required parameter 'timestamp' when calling PaymentTokenApi->GetPaymentTokenDetails");
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling PaymentTokenApi->GetPaymentTokenDetails");

            var localVarPath = "/payment-tokens/{token-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenId != null) localVarPathParams.Add("token-id", this.Configuration.ApiClient.ParameterToString(tokenId)); // path parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientRequestId != null) localVarHeaderParams.Add("Client-Request-Id", this.Configuration.ApiClient.ParameterToString(clientRequestId)); // header parameter
            if (apiKey != null) localVarHeaderParams.Add("Api-Key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter
            if (timestamp != null) localVarHeaderParams.Add("Timestamp", this.Configuration.ApiClient.ParameterToString(timestamp)); // header parameter
            if (messageSignature != null) localVarHeaderParams.Add("Message-Signature", this.Configuration.ApiClient.ParameterToString(messageSignature)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (region != null) localVarHeaderParams.Add("Region", this.Configuration.ApiClient.ParameterToString(region)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                RestSharp.Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaymentTokenDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentTokenizationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PaymentTokenizationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentTokenizationResponse)));
        }

        /// <summary>
        /// Update one or more payment tokens. Use this update one or more payment tokens.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentCardPaymentTokenUpdateRequest">Accepted request type: PaymentCardPaymentTokenUpdateRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>PaymentTokenUpdateResponse</returns>
        public PaymentTokenUpdateResponse UpdatePaymentToken (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentCardPaymentTokenUpdateRequest paymentCardPaymentTokenUpdateRequest, string messageSignature = default(string), string authorization = default(string), string region = default(string))
        {
             ApiResponse<PaymentTokenUpdateResponse> localVarResponse = UpdatePaymentTokenWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, paymentCardPaymentTokenUpdateRequest, messageSignature, authorization, region);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update one or more payment tokens. Use this update one or more payment tokens.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentCardPaymentTokenUpdateRequest">Accepted request type: PaymentCardPaymentTokenUpdateRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>ApiResponse of PaymentTokenUpdateResponse</returns>
        public ApiResponse<PaymentTokenUpdateResponse> UpdatePaymentTokenWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentCardPaymentTokenUpdateRequest paymentCardPaymentTokenUpdateRequest, string messageSignature = default(string), string authorization = default(string), string region = default(string))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentTokenApi->UpdatePaymentToken");
            // verify the required parameter 'clientRequestId' is set
            if (clientRequestId == null)
                throw new ApiException(400, "Missing required parameter 'clientRequestId' when calling PaymentTokenApi->UpdatePaymentToken");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling PaymentTokenApi->UpdatePaymentToken");
            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new ApiException(400, "Missing required parameter 'timestamp' when calling PaymentTokenApi->UpdatePaymentToken");
            // verify the required parameter 'paymentCardPaymentTokenUpdateRequest' is set
            if (paymentCardPaymentTokenUpdateRequest == null)
                throw new ApiException(400, "Missing required parameter 'paymentCardPaymentTokenUpdateRequest' when calling PaymentTokenApi->UpdatePaymentToken");

            var localVarPath = "/payment-tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientRequestId != null) localVarHeaderParams.Add("Client-Request-Id", this.Configuration.ApiClient.ParameterToString(clientRequestId)); // header parameter
            if (apiKey != null) localVarHeaderParams.Add("Api-Key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter
            if (timestamp != null) localVarHeaderParams.Add("Timestamp", this.Configuration.ApiClient.ParameterToString(timestamp)); // header parameter
            if (messageSignature != null) localVarHeaderParams.Add("Message-Signature", this.Configuration.ApiClient.ParameterToString(messageSignature)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (region != null) localVarHeaderParams.Add("Region", this.Configuration.ApiClient.ParameterToString(region)); // header parameter
            if (paymentCardPaymentTokenUpdateRequest != null && paymentCardPaymentTokenUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(paymentCardPaymentTokenUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paymentCardPaymentTokenUpdateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                RestSharp.Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePaymentToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentTokenUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PaymentTokenUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentTokenUpdateResponse)));
        }

        /// <summary>
        /// Update one or more payment tokens. Use this update one or more payment tokens.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentCardPaymentTokenUpdateRequest">Accepted request type: PaymentCardPaymentTokenUpdateRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>Task of PaymentTokenUpdateResponse</returns>
        public async System.Threading.Tasks.Task<PaymentTokenUpdateResponse> UpdatePaymentTokenAsync (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentCardPaymentTokenUpdateRequest paymentCardPaymentTokenUpdateRequest, string messageSignature = default(string), string authorization = default(string), string region = default(string))
        {
             ApiResponse<PaymentTokenUpdateResponse> localVarResponse = await UpdatePaymentTokenAsyncWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, paymentCardPaymentTokenUpdateRequest, messageSignature, authorization, region);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update one or more payment tokens. Use this update one or more payment tokens.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentCardPaymentTokenUpdateRequest">Accepted request type: PaymentCardPaymentTokenUpdateRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>Task of ApiResponse (PaymentTokenUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentTokenUpdateResponse>> UpdatePaymentTokenAsyncWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentCardPaymentTokenUpdateRequest paymentCardPaymentTokenUpdateRequest, string messageSignature = default(string), string authorization = default(string), string region = default(string))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentTokenApi->UpdatePaymentToken");
            // verify the required parameter 'clientRequestId' is set
            if (clientRequestId == null)
                throw new ApiException(400, "Missing required parameter 'clientRequestId' when calling PaymentTokenApi->UpdatePaymentToken");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling PaymentTokenApi->UpdatePaymentToken");
            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new ApiException(400, "Missing required parameter 'timestamp' when calling PaymentTokenApi->UpdatePaymentToken");
            // verify the required parameter 'paymentCardPaymentTokenUpdateRequest' is set
            if (paymentCardPaymentTokenUpdateRequest == null)
                throw new ApiException(400, "Missing required parameter 'paymentCardPaymentTokenUpdateRequest' when calling PaymentTokenApi->UpdatePaymentToken");

            var localVarPath = "/payment-tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientRequestId != null) localVarHeaderParams.Add("Client-Request-Id", this.Configuration.ApiClient.ParameterToString(clientRequestId)); // header parameter
            if (apiKey != null) localVarHeaderParams.Add("Api-Key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter
            if (timestamp != null) localVarHeaderParams.Add("Timestamp", this.Configuration.ApiClient.ParameterToString(timestamp)); // header parameter
            if (messageSignature != null) localVarHeaderParams.Add("Message-Signature", this.Configuration.ApiClient.ParameterToString(messageSignature)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (region != null) localVarHeaderParams.Add("Region", this.Configuration.ApiClient.ParameterToString(region)); // header parameter
            if (paymentCardPaymentTokenUpdateRequest != null && paymentCardPaymentTokenUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(paymentCardPaymentTokenUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paymentCardPaymentTokenUpdateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                RestSharp.Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePaymentToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentTokenUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PaymentTokenUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentTokenUpdateResponse)));
        }

    }
}
