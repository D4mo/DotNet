/* 
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 6.12.0.20200605.001
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Update a 3DSecure or UnionPay payment and continue processing.
        /// </summary>
        /// <remarks>
        /// Use this to handle a 3DSecure redirect response or UnionPay authentication, updating the transaction and continuing processing.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="transactionId">Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId.</param>
        /// <param name="authenticationUpdateRequest">Accepted request types: Secure3D10AuthenticationUpdateRequest, Secure3D21AuthenticationUpdateRequest, and UnionPayAuthenticationUpdateRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>TransactionResponse</returns>
        TransactionResponse FinalizeSecureTransaction (string contentType, string clientRequestId, string apiKey, long timestamp, string transactionId, AuthenticationUpdateRequest authenticationUpdateRequest, string messageSignature = default(string), string region = default(string));

        /// <summary>
        /// Update a 3DSecure or UnionPay payment and continue processing.
        /// </summary>
        /// <remarks>
        /// Use this to handle a 3DSecure redirect response or UnionPay authentication, updating the transaction and continuing processing.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="transactionId">Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId.</param>
        /// <param name="authenticationUpdateRequest">Accepted request types: Secure3D10AuthenticationUpdateRequest, Secure3D21AuthenticationUpdateRequest, and UnionPayAuthenticationUpdateRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>ApiResponse of TransactionResponse</returns>
        ApiResponse<TransactionResponse> FinalizeSecureTransactionWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string transactionId, AuthenticationUpdateRequest authenticationUpdateRequest, string messageSignature = default(string), string region = default(string));
        /// <summary>
        /// Generate a primary transaction.
        /// </summary>
        /// <remarks>
        /// Use this to originate a financial transaction like a sale, preauthorization, or credit.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="primaryTransaction">Accepted request types: AliPaySaleTransaction, ChinaPnRSaleTransaction, PaymentCardCreditTransaction, PaymentCardForcedTicketTransaction, PaymentCardSaleTransaction, PaymentCardPreAuthTransaction, PaymentCardPayerAuthTransaction, PaymentCardDisbursementTransaction, PaymentTokenCreditTransaction, PaymentTokenPreAuthTransaction, PaymentTokenSaleTransaction, PaymentTokenDisbursementTransaction, PaypalCreditTransaction, SepaSaleTransaction, WalletSaleTransaction, and WalletPreAuthTransaction, PaymentDeviceSaleTransaction, PaymentDevicePreAuthTransaction, PaymentDeviceCreditTransaction, PaymentDeviceDisbursementTransaction, AchPreAuthTransaction, AchSaleTransaction, AchCreditTransaction.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>TransactionResponse</returns>
        TransactionResponse SubmitPrimaryTransaction (string contentType, string clientRequestId, string apiKey, long timestamp, PrimaryTransaction primaryTransaction, string messageSignature = default(string), string region = default(string));

        /// <summary>
        /// Generate a primary transaction.
        /// </summary>
        /// <remarks>
        /// Use this to originate a financial transaction like a sale, preauthorization, or credit.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="primaryTransaction">Accepted request types: AliPaySaleTransaction, ChinaPnRSaleTransaction, PaymentCardCreditTransaction, PaymentCardForcedTicketTransaction, PaymentCardSaleTransaction, PaymentCardPreAuthTransaction, PaymentCardPayerAuthTransaction, PaymentCardDisbursementTransaction, PaymentTokenCreditTransaction, PaymentTokenPreAuthTransaction, PaymentTokenSaleTransaction, PaymentTokenDisbursementTransaction, PaypalCreditTransaction, SepaSaleTransaction, WalletSaleTransaction, and WalletPreAuthTransaction, PaymentDeviceSaleTransaction, PaymentDevicePreAuthTransaction, PaymentDeviceCreditTransaction, PaymentDeviceDisbursementTransaction, AchPreAuthTransaction, AchSaleTransaction, AchCreditTransaction.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>ApiResponse of TransactionResponse</returns>
        ApiResponse<TransactionResponse> SubmitPrimaryTransactionWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, PrimaryTransaction primaryTransaction, string messageSignature = default(string), string region = default(string));
        /// <summary>
        /// Perform a secondary transaction.
        /// </summary>
        /// <remarks>
        /// Use this to perform a void, postAuth or return secondary transaction. Partial postAuths and returns are allowed.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="transactionId">Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId.</param>
        /// <param name="secondaryTransaction">Accepted request types: PostAuthTransaction, VoidTransaction, VoidPreAuthTransactions, ReturnTransaction, AchPostAuthTransaction, AchVoidTransaction and AchReturnTransaction.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId">An optional outlet ID for clients that support multiple stores in the same developer app. (optional)</param>
        /// <returns>TransactionResponse</returns>
        TransactionResponse SubmitSecondaryTransaction (string contentType, string clientRequestId, string apiKey, long timestamp, string transactionId, SecondaryTransaction secondaryTransaction, string messageSignature = default(string), string region = default(string), string storeId = default(string));

        /// <summary>
        /// Perform a secondary transaction.
        /// </summary>
        /// <remarks>
        /// Use this to perform a void, postAuth or return secondary transaction. Partial postAuths and returns are allowed.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="transactionId">Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId.</param>
        /// <param name="secondaryTransaction">Accepted request types: PostAuthTransaction, VoidTransaction, VoidPreAuthTransactions, ReturnTransaction, AchPostAuthTransaction, AchVoidTransaction and AchReturnTransaction.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId">An optional outlet ID for clients that support multiple stores in the same developer app. (optional)</param>
        /// <returns>ApiResponse of TransactionResponse</returns>
        ApiResponse<TransactionResponse> SubmitSecondaryTransactionWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string transactionId, SecondaryTransaction secondaryTransaction, string messageSignature = default(string), string region = default(string), string storeId = default(string));
        /// <summary>
        /// Retrieve the state of a transaction.
        /// </summary>
        /// <remarks>
        /// Use this query to get the current state of an existing transaction.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="transactionId">Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId">An optional outlet ID for clients that support multiple stores in the same developer app. (optional)</param>
        /// <returns>TransactionResponse</returns>
        TransactionResponse TransactionInquiry (string contentType, string clientRequestId, string apiKey, long timestamp, string transactionId, string messageSignature = default(string), string region = default(string), string storeId = default(string));

        /// <summary>
        /// Retrieve the state of a transaction.
        /// </summary>
        /// <remarks>
        /// Use this query to get the current state of an existing transaction.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="transactionId">Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId">An optional outlet ID for clients that support multiple stores in the same developer app. (optional)</param>
        /// <returns>ApiResponse of TransactionResponse</returns>
        ApiResponse<TransactionResponse> TransactionInquiryWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string transactionId, string messageSignature = default(string), string region = default(string), string storeId = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Update a 3DSecure or UnionPay payment and continue processing.
        /// </summary>
        /// <remarks>
        /// Use this to handle a 3DSecure redirect response or UnionPay authentication, updating the transaction and continuing processing.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="transactionId">Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId.</param>
        /// <param name="authenticationUpdateRequest">Accepted request types: Secure3D10AuthenticationUpdateRequest, Secure3D21AuthenticationUpdateRequest, and UnionPayAuthenticationUpdateRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>Task of TransactionResponse</returns>
        System.Threading.Tasks.Task<TransactionResponse> FinalizeSecureTransactionAsync (string contentType, string clientRequestId, string apiKey, long timestamp, string transactionId, AuthenticationUpdateRequest authenticationUpdateRequest, string messageSignature = default(string), string region = default(string));

        /// <summary>
        /// Update a 3DSecure or UnionPay payment and continue processing.
        /// </summary>
        /// <remarks>
        /// Use this to handle a 3DSecure redirect response or UnionPay authentication, updating the transaction and continuing processing.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="transactionId">Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId.</param>
        /// <param name="authenticationUpdateRequest">Accepted request types: Secure3D10AuthenticationUpdateRequest, Secure3D21AuthenticationUpdateRequest, and UnionPayAuthenticationUpdateRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>Task of ApiResponse (TransactionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionResponse>> FinalizeSecureTransactionAsyncWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string transactionId, AuthenticationUpdateRequest authenticationUpdateRequest, string messageSignature = default(string), string region = default(string));
        /// <summary>
        /// Generate a primary transaction.
        /// </summary>
        /// <remarks>
        /// Use this to originate a financial transaction like a sale, preauthorization, or credit.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="primaryTransaction">Accepted request types: AliPaySaleTransaction, ChinaPnRSaleTransaction, PaymentCardCreditTransaction, PaymentCardForcedTicketTransaction, PaymentCardSaleTransaction, PaymentCardPreAuthTransaction, PaymentCardPayerAuthTransaction, PaymentCardDisbursementTransaction, PaymentTokenCreditTransaction, PaymentTokenPreAuthTransaction, PaymentTokenSaleTransaction, PaymentTokenDisbursementTransaction, PaypalCreditTransaction, SepaSaleTransaction, WalletSaleTransaction, and WalletPreAuthTransaction, PaymentDeviceSaleTransaction, PaymentDevicePreAuthTransaction, PaymentDeviceCreditTransaction, PaymentDeviceDisbursementTransaction, AchPreAuthTransaction, AchSaleTransaction, AchCreditTransaction.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>Task of TransactionResponse</returns>
        System.Threading.Tasks.Task<TransactionResponse> SubmitPrimaryTransactionAsync (string contentType, string clientRequestId, string apiKey, long timestamp, PrimaryTransaction primaryTransaction, string messageSignature = default(string), string region = default(string));

        /// <summary>
        /// Generate a primary transaction.
        /// </summary>
        /// <remarks>
        /// Use this to originate a financial transaction like a sale, preauthorization, or credit.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="primaryTransaction">Accepted request types: AliPaySaleTransaction, ChinaPnRSaleTransaction, PaymentCardCreditTransaction, PaymentCardForcedTicketTransaction, PaymentCardSaleTransaction, PaymentCardPreAuthTransaction, PaymentCardPayerAuthTransaction, PaymentCardDisbursementTransaction, PaymentTokenCreditTransaction, PaymentTokenPreAuthTransaction, PaymentTokenSaleTransaction, PaymentTokenDisbursementTransaction, PaypalCreditTransaction, SepaSaleTransaction, WalletSaleTransaction, and WalletPreAuthTransaction, PaymentDeviceSaleTransaction, PaymentDevicePreAuthTransaction, PaymentDeviceCreditTransaction, PaymentDeviceDisbursementTransaction, AchPreAuthTransaction, AchSaleTransaction, AchCreditTransaction.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>Task of ApiResponse (TransactionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionResponse>> SubmitPrimaryTransactionAsyncWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, PrimaryTransaction primaryTransaction, string messageSignature = default(string), string region = default(string));
        /// <summary>
        /// Perform a secondary transaction.
        /// </summary>
        /// <remarks>
        /// Use this to perform a void, postAuth or return secondary transaction. Partial postAuths and returns are allowed.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="transactionId">Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId.</param>
        /// <param name="secondaryTransaction">Accepted request types: PostAuthTransaction, VoidTransaction, VoidPreAuthTransactions, ReturnTransaction, AchPostAuthTransaction, AchVoidTransaction and AchReturnTransaction.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId">An optional outlet ID for clients that support multiple stores in the same developer app. (optional)</param>
        /// <returns>Task of TransactionResponse</returns>
        System.Threading.Tasks.Task<TransactionResponse> SubmitSecondaryTransactionAsync (string contentType, string clientRequestId, string apiKey, long timestamp, string transactionId, SecondaryTransaction secondaryTransaction, string messageSignature = default(string), string region = default(string), string storeId = default(string));

        /// <summary>
        /// Perform a secondary transaction.
        /// </summary>
        /// <remarks>
        /// Use this to perform a void, postAuth or return secondary transaction. Partial postAuths and returns are allowed.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="transactionId">Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId.</param>
        /// <param name="secondaryTransaction">Accepted request types: PostAuthTransaction, VoidTransaction, VoidPreAuthTransactions, ReturnTransaction, AchPostAuthTransaction, AchVoidTransaction and AchReturnTransaction.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId">An optional outlet ID for clients that support multiple stores in the same developer app. (optional)</param>
        /// <returns>Task of ApiResponse (TransactionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionResponse>> SubmitSecondaryTransactionAsyncWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string transactionId, SecondaryTransaction secondaryTransaction, string messageSignature = default(string), string region = default(string), string storeId = default(string));
        /// <summary>
        /// Retrieve the state of a transaction.
        /// </summary>
        /// <remarks>
        /// Use this query to get the current state of an existing transaction.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="transactionId">Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId">An optional outlet ID for clients that support multiple stores in the same developer app. (optional)</param>
        /// <returns>Task of TransactionResponse</returns>
        System.Threading.Tasks.Task<TransactionResponse> TransactionInquiryAsync (string contentType, string clientRequestId, string apiKey, long timestamp, string transactionId, string messageSignature = default(string), string region = default(string), string storeId = default(string));

        /// <summary>
        /// Retrieve the state of a transaction.
        /// </summary>
        /// <remarks>
        /// Use this query to get the current state of an existing transaction.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="transactionId">Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId">An optional outlet ID for clients that support multiple stores in the same developer app. (optional)</param>
        /// <returns>Task of ApiResponse (TransactionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionResponse>> TransactionInquiryAsyncWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string transactionId, string messageSignature = default(string), string region = default(string), string storeId = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PaymentApi : IPaymentApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentApi"/> class
        /// </summary>
        /// <returns></returns>
        public PaymentApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PaymentApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Update a 3DSecure or UnionPay payment and continue processing. Use this to handle a 3DSecure redirect response or UnionPay authentication, updating the transaction and continuing processing.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="transactionId">Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId.</param>
        /// <param name="authenticationUpdateRequest">Accepted request types: Secure3D10AuthenticationUpdateRequest, Secure3D21AuthenticationUpdateRequest, and UnionPayAuthenticationUpdateRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>TransactionResponse</returns>
        public TransactionResponse FinalizeSecureTransaction (string contentType, string clientRequestId, string apiKey, long timestamp, string transactionId, AuthenticationUpdateRequest authenticationUpdateRequest, string messageSignature = default(string), string region = default(string))
        {
             ApiResponse<TransactionResponse> localVarResponse = FinalizeSecureTransactionWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, transactionId, authenticationUpdateRequest, messageSignature, region);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a 3DSecure or UnionPay payment and continue processing. Use this to handle a 3DSecure redirect response or UnionPay authentication, updating the transaction and continuing processing.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="transactionId">Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId.</param>
        /// <param name="authenticationUpdateRequest">Accepted request types: Secure3D10AuthenticationUpdateRequest, Secure3D21AuthenticationUpdateRequest, and UnionPayAuthenticationUpdateRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>ApiResponse of TransactionResponse</returns>
        public ApiResponse<TransactionResponse> FinalizeSecureTransactionWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string transactionId, AuthenticationUpdateRequest authenticationUpdateRequest, string messageSignature = default(string), string region = default(string))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentApi->FinalizeSecureTransaction");
            // verify the required parameter 'clientRequestId' is set
            if (clientRequestId == null)
                throw new ApiException(400, "Missing required parameter 'clientRequestId' when calling PaymentApi->FinalizeSecureTransaction");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling PaymentApi->FinalizeSecureTransaction");
            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new ApiException(400, "Missing required parameter 'timestamp' when calling PaymentApi->FinalizeSecureTransaction");
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling PaymentApi->FinalizeSecureTransaction");
            // verify the required parameter 'authenticationUpdateRequest' is set
            if (authenticationUpdateRequest == null)
                throw new ApiException(400, "Missing required parameter 'authenticationUpdateRequest' when calling PaymentApi->FinalizeSecureTransaction");

            var localVarPath = "/payments/{transaction-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionId != null) localVarPathParams.Add("transaction-id", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientRequestId != null) localVarHeaderParams.Add("Client-Request-Id", this.Configuration.ApiClient.ParameterToString(clientRequestId)); // header parameter
            if (apiKey != null) localVarHeaderParams.Add("Api-Key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter
            if (timestamp != null) localVarHeaderParams.Add("Timestamp", this.Configuration.ApiClient.ParameterToString(timestamp)); // header parameter
            if (messageSignature != null) localVarHeaderParams.Add("Message-Signature", this.Configuration.ApiClient.ParameterToString(messageSignature)); // header parameter
            if (region != null) localVarHeaderParams.Add("Region", this.Configuration.ApiClient.ParameterToString(region)); // header parameter
            if (authenticationUpdateRequest != null && authenticationUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(authenticationUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = authenticationUpdateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                RestSharp.Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FinalizeSecureTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResponse)));
        }

        /// <summary>
        /// Update a 3DSecure or UnionPay payment and continue processing. Use this to handle a 3DSecure redirect response or UnionPay authentication, updating the transaction and continuing processing.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="transactionId">Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId.</param>
        /// <param name="authenticationUpdateRequest">Accepted request types: Secure3D10AuthenticationUpdateRequest, Secure3D21AuthenticationUpdateRequest, and UnionPayAuthenticationUpdateRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>Task of TransactionResponse</returns>
        public async System.Threading.Tasks.Task<TransactionResponse> FinalizeSecureTransactionAsync (string contentType, string clientRequestId, string apiKey, long timestamp, string transactionId, AuthenticationUpdateRequest authenticationUpdateRequest, string messageSignature = default(string), string region = default(string))
        {
             ApiResponse<TransactionResponse> localVarResponse = await FinalizeSecureTransactionAsyncWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, transactionId, authenticationUpdateRequest, messageSignature, region);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a 3DSecure or UnionPay payment and continue processing. Use this to handle a 3DSecure redirect response or UnionPay authentication, updating the transaction and continuing processing.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="transactionId">Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId.</param>
        /// <param name="authenticationUpdateRequest">Accepted request types: Secure3D10AuthenticationUpdateRequest, Secure3D21AuthenticationUpdateRequest, and UnionPayAuthenticationUpdateRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>Task of ApiResponse (TransactionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionResponse>> FinalizeSecureTransactionAsyncWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string transactionId, AuthenticationUpdateRequest authenticationUpdateRequest, string messageSignature = default(string), string region = default(string))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentApi->FinalizeSecureTransaction");
            // verify the required parameter 'clientRequestId' is set
            if (clientRequestId == null)
                throw new ApiException(400, "Missing required parameter 'clientRequestId' when calling PaymentApi->FinalizeSecureTransaction");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling PaymentApi->FinalizeSecureTransaction");
            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new ApiException(400, "Missing required parameter 'timestamp' when calling PaymentApi->FinalizeSecureTransaction");
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling PaymentApi->FinalizeSecureTransaction");
            // verify the required parameter 'authenticationUpdateRequest' is set
            if (authenticationUpdateRequest == null)
                throw new ApiException(400, "Missing required parameter 'authenticationUpdateRequest' when calling PaymentApi->FinalizeSecureTransaction");

            var localVarPath = "/payments/{transaction-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionId != null) localVarPathParams.Add("transaction-id", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientRequestId != null) localVarHeaderParams.Add("Client-Request-Id", this.Configuration.ApiClient.ParameterToString(clientRequestId)); // header parameter
            if (apiKey != null) localVarHeaderParams.Add("Api-Key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter
            if (timestamp != null) localVarHeaderParams.Add("Timestamp", this.Configuration.ApiClient.ParameterToString(timestamp)); // header parameter
            if (messageSignature != null) localVarHeaderParams.Add("Message-Signature", this.Configuration.ApiClient.ParameterToString(messageSignature)); // header parameter
            if (region != null) localVarHeaderParams.Add("Region", this.Configuration.ApiClient.ParameterToString(region)); // header parameter
            if (authenticationUpdateRequest != null && authenticationUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(authenticationUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = authenticationUpdateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                RestSharp.Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FinalizeSecureTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResponse)));
        }

        /// <summary>
        /// Generate a primary transaction. Use this to originate a financial transaction like a sale, preauthorization, or credit.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="primaryTransaction">Accepted request types: AliPaySaleTransaction, ChinaPnRSaleTransaction, PaymentCardCreditTransaction, PaymentCardForcedTicketTransaction, PaymentCardSaleTransaction, PaymentCardPreAuthTransaction, PaymentCardPayerAuthTransaction, PaymentCardDisbursementTransaction, PaymentTokenCreditTransaction, PaymentTokenPreAuthTransaction, PaymentTokenSaleTransaction, PaymentTokenDisbursementTransaction, PaypalCreditTransaction, SepaSaleTransaction, WalletSaleTransaction, and WalletPreAuthTransaction, PaymentDeviceSaleTransaction, PaymentDevicePreAuthTransaction, PaymentDeviceCreditTransaction, PaymentDeviceDisbursementTransaction, AchPreAuthTransaction, AchSaleTransaction, AchCreditTransaction.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>TransactionResponse</returns>
        public TransactionResponse SubmitPrimaryTransaction (string contentType, string clientRequestId, string apiKey, long timestamp, PrimaryTransaction primaryTransaction, string messageSignature = default(string), string region = default(string))
        {
             ApiResponse<TransactionResponse> localVarResponse = SubmitPrimaryTransactionWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, primaryTransaction, messageSignature, region);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate a primary transaction. Use this to originate a financial transaction like a sale, preauthorization, or credit.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="primaryTransaction">Accepted request types: AliPaySaleTransaction, ChinaPnRSaleTransaction, PaymentCardCreditTransaction, PaymentCardForcedTicketTransaction, PaymentCardSaleTransaction, PaymentCardPreAuthTransaction, PaymentCardPayerAuthTransaction, PaymentCardDisbursementTransaction, PaymentTokenCreditTransaction, PaymentTokenPreAuthTransaction, PaymentTokenSaleTransaction, PaymentTokenDisbursementTransaction, PaypalCreditTransaction, SepaSaleTransaction, WalletSaleTransaction, and WalletPreAuthTransaction, PaymentDeviceSaleTransaction, PaymentDevicePreAuthTransaction, PaymentDeviceCreditTransaction, PaymentDeviceDisbursementTransaction, AchPreAuthTransaction, AchSaleTransaction, AchCreditTransaction.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>ApiResponse of TransactionResponse</returns>
        public ApiResponse<TransactionResponse> SubmitPrimaryTransactionWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, PrimaryTransaction primaryTransaction, string messageSignature = default(string), string region = default(string))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentApi->SubmitPrimaryTransaction");
            // verify the required parameter 'clientRequestId' is set
            if (clientRequestId == null)
                throw new ApiException(400, "Missing required parameter 'clientRequestId' when calling PaymentApi->SubmitPrimaryTransaction");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling PaymentApi->SubmitPrimaryTransaction");
            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new ApiException(400, "Missing required parameter 'timestamp' when calling PaymentApi->SubmitPrimaryTransaction");
            // verify the required parameter 'primaryTransaction' is set
            if (primaryTransaction == null)
                throw new ApiException(400, "Missing required parameter 'primaryTransaction' when calling PaymentApi->SubmitPrimaryTransaction");

            var localVarPath = "/payments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientRequestId != null) localVarHeaderParams.Add("Client-Request-Id", this.Configuration.ApiClient.ParameterToString(clientRequestId)); // header parameter
            if (apiKey != null) localVarHeaderParams.Add("Api-Key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter
            if (timestamp != null) localVarHeaderParams.Add("Timestamp", this.Configuration.ApiClient.ParameterToString(timestamp)); // header parameter
            if (messageSignature != null) localVarHeaderParams.Add("Message-Signature", this.Configuration.ApiClient.ParameterToString(messageSignature)); // header parameter
            if (region != null) localVarHeaderParams.Add("Region", this.Configuration.ApiClient.ParameterToString(region)); // header parameter
            if (primaryTransaction != null && primaryTransaction.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(primaryTransaction); // http body (model) parameter
            }
            else
            {
                localVarPostBody = primaryTransaction; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                RestSharp.Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitPrimaryTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResponse)));
        }

        /// <summary>
        /// Generate a primary transaction. Use this to originate a financial transaction like a sale, preauthorization, or credit.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="primaryTransaction">Accepted request types: AliPaySaleTransaction, ChinaPnRSaleTransaction, PaymentCardCreditTransaction, PaymentCardForcedTicketTransaction, PaymentCardSaleTransaction, PaymentCardPreAuthTransaction, PaymentCardPayerAuthTransaction, PaymentCardDisbursementTransaction, PaymentTokenCreditTransaction, PaymentTokenPreAuthTransaction, PaymentTokenSaleTransaction, PaymentTokenDisbursementTransaction, PaypalCreditTransaction, SepaSaleTransaction, WalletSaleTransaction, and WalletPreAuthTransaction, PaymentDeviceSaleTransaction, PaymentDevicePreAuthTransaction, PaymentDeviceCreditTransaction, PaymentDeviceDisbursementTransaction, AchPreAuthTransaction, AchSaleTransaction, AchCreditTransaction.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>Task of TransactionResponse</returns>
        public async System.Threading.Tasks.Task<TransactionResponse> SubmitPrimaryTransactionAsync (string contentType, string clientRequestId, string apiKey, long timestamp, PrimaryTransaction primaryTransaction, string messageSignature = default(string), string region = default(string))
        {
             ApiResponse<TransactionResponse> localVarResponse = await SubmitPrimaryTransactionAsyncWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, primaryTransaction, messageSignature, region);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate a primary transaction. Use this to originate a financial transaction like a sale, preauthorization, or credit.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="primaryTransaction">Accepted request types: AliPaySaleTransaction, ChinaPnRSaleTransaction, PaymentCardCreditTransaction, PaymentCardForcedTicketTransaction, PaymentCardSaleTransaction, PaymentCardPreAuthTransaction, PaymentCardPayerAuthTransaction, PaymentCardDisbursementTransaction, PaymentTokenCreditTransaction, PaymentTokenPreAuthTransaction, PaymentTokenSaleTransaction, PaymentTokenDisbursementTransaction, PaypalCreditTransaction, SepaSaleTransaction, WalletSaleTransaction, and WalletPreAuthTransaction, PaymentDeviceSaleTransaction, PaymentDevicePreAuthTransaction, PaymentDeviceCreditTransaction, PaymentDeviceDisbursementTransaction, AchPreAuthTransaction, AchSaleTransaction, AchCreditTransaction.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>Task of ApiResponse (TransactionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionResponse>> SubmitPrimaryTransactionAsyncWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, PrimaryTransaction primaryTransaction, string messageSignature = default(string), string region = default(string))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentApi->SubmitPrimaryTransaction");
            // verify the required parameter 'clientRequestId' is set
            if (clientRequestId == null)
                throw new ApiException(400, "Missing required parameter 'clientRequestId' when calling PaymentApi->SubmitPrimaryTransaction");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling PaymentApi->SubmitPrimaryTransaction");
            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new ApiException(400, "Missing required parameter 'timestamp' when calling PaymentApi->SubmitPrimaryTransaction");
            // verify the required parameter 'primaryTransaction' is set
            if (primaryTransaction == null)
                throw new ApiException(400, "Missing required parameter 'primaryTransaction' when calling PaymentApi->SubmitPrimaryTransaction");

            var localVarPath = "/payments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientRequestId != null) localVarHeaderParams.Add("Client-Request-Id", this.Configuration.ApiClient.ParameterToString(clientRequestId)); // header parameter
            if (apiKey != null) localVarHeaderParams.Add("Api-Key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter
            if (timestamp != null) localVarHeaderParams.Add("Timestamp", this.Configuration.ApiClient.ParameterToString(timestamp)); // header parameter
            if (messageSignature != null) localVarHeaderParams.Add("Message-Signature", this.Configuration.ApiClient.ParameterToString(messageSignature)); // header parameter
            if (region != null) localVarHeaderParams.Add("Region", this.Configuration.ApiClient.ParameterToString(region)); // header parameter
            if (primaryTransaction != null && primaryTransaction.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(primaryTransaction); // http body (model) parameter
            }
            else
            {
                localVarPostBody = primaryTransaction; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                RestSharp.Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitPrimaryTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResponse)));
        }

        /// <summary>
        /// Perform a secondary transaction. Use this to perform a void, postAuth or return secondary transaction. Partial postAuths and returns are allowed.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="transactionId">Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId.</param>
        /// <param name="secondaryTransaction">Accepted request types: PostAuthTransaction, VoidTransaction, VoidPreAuthTransactions, ReturnTransaction, AchPostAuthTransaction, AchVoidTransaction and AchReturnTransaction.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId">An optional outlet ID for clients that support multiple stores in the same developer app. (optional)</param>
        /// <returns>TransactionResponse</returns>
        public TransactionResponse SubmitSecondaryTransaction (string contentType, string clientRequestId, string apiKey, long timestamp, string transactionId, SecondaryTransaction secondaryTransaction, string messageSignature = default(string), string region = default(string), string storeId = default(string))
        {
             ApiResponse<TransactionResponse> localVarResponse = SubmitSecondaryTransactionWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, transactionId, secondaryTransaction, messageSignature, region, storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Perform a secondary transaction. Use this to perform a void, postAuth or return secondary transaction. Partial postAuths and returns are allowed.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="transactionId">Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId.</param>
        /// <param name="secondaryTransaction">Accepted request types: PostAuthTransaction, VoidTransaction, VoidPreAuthTransactions, ReturnTransaction, AchPostAuthTransaction, AchVoidTransaction and AchReturnTransaction.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId">An optional outlet ID for clients that support multiple stores in the same developer app. (optional)</param>
        /// <returns>ApiResponse of TransactionResponse</returns>
        public ApiResponse<TransactionResponse> SubmitSecondaryTransactionWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string transactionId, SecondaryTransaction secondaryTransaction, string messageSignature = default(string), string region = default(string), string storeId = default(string))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentApi->SubmitSecondaryTransaction");
            // verify the required parameter 'clientRequestId' is set
            if (clientRequestId == null)
                throw new ApiException(400, "Missing required parameter 'clientRequestId' when calling PaymentApi->SubmitSecondaryTransaction");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling PaymentApi->SubmitSecondaryTransaction");
            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new ApiException(400, "Missing required parameter 'timestamp' when calling PaymentApi->SubmitSecondaryTransaction");
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling PaymentApi->SubmitSecondaryTransaction");
            // verify the required parameter 'secondaryTransaction' is set
            if (secondaryTransaction == null)
                throw new ApiException(400, "Missing required parameter 'secondaryTransaction' when calling PaymentApi->SubmitSecondaryTransaction");

            var localVarPath = "/payments/{transaction-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionId != null) localVarPathParams.Add("transaction-id", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientRequestId != null) localVarHeaderParams.Add("Client-Request-Id", this.Configuration.ApiClient.ParameterToString(clientRequestId)); // header parameter
            if (apiKey != null) localVarHeaderParams.Add("Api-Key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter
            if (timestamp != null) localVarHeaderParams.Add("Timestamp", this.Configuration.ApiClient.ParameterToString(timestamp)); // header parameter
            if (messageSignature != null) localVarHeaderParams.Add("Message-Signature", this.Configuration.ApiClient.ParameterToString(messageSignature)); // header parameter
            if (region != null) localVarHeaderParams.Add("Region", this.Configuration.ApiClient.ParameterToString(region)); // header parameter
            if (secondaryTransaction != null && secondaryTransaction.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(secondaryTransaction); // http body (model) parameter
            }
            else
            {
                localVarPostBody = secondaryTransaction; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                RestSharp.Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitSecondaryTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResponse)));
        }

        /// <summary>
        /// Perform a secondary transaction. Use this to perform a void, postAuth or return secondary transaction. Partial postAuths and returns are allowed.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="transactionId">Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId.</param>
        /// <param name="secondaryTransaction">Accepted request types: PostAuthTransaction, VoidTransaction, VoidPreAuthTransactions, ReturnTransaction, AchPostAuthTransaction, AchVoidTransaction and AchReturnTransaction.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId">An optional outlet ID for clients that support multiple stores in the same developer app. (optional)</param>
        /// <returns>Task of TransactionResponse</returns>
        public async System.Threading.Tasks.Task<TransactionResponse> SubmitSecondaryTransactionAsync (string contentType, string clientRequestId, string apiKey, long timestamp, string transactionId, SecondaryTransaction secondaryTransaction, string messageSignature = default(string), string region = default(string), string storeId = default(string))
        {
             ApiResponse<TransactionResponse> localVarResponse = await SubmitSecondaryTransactionAsyncWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, transactionId, secondaryTransaction, messageSignature, region, storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Perform a secondary transaction. Use this to perform a void, postAuth or return secondary transaction. Partial postAuths and returns are allowed.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="transactionId">Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId.</param>
        /// <param name="secondaryTransaction">Accepted request types: PostAuthTransaction, VoidTransaction, VoidPreAuthTransactions, ReturnTransaction, AchPostAuthTransaction, AchVoidTransaction and AchReturnTransaction.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId">An optional outlet ID for clients that support multiple stores in the same developer app. (optional)</param>
        /// <returns>Task of ApiResponse (TransactionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionResponse>> SubmitSecondaryTransactionAsyncWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string transactionId, SecondaryTransaction secondaryTransaction, string messageSignature = default(string), string region = default(string), string storeId = default(string))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentApi->SubmitSecondaryTransaction");
            // verify the required parameter 'clientRequestId' is set
            if (clientRequestId == null)
                throw new ApiException(400, "Missing required parameter 'clientRequestId' when calling PaymentApi->SubmitSecondaryTransaction");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling PaymentApi->SubmitSecondaryTransaction");
            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new ApiException(400, "Missing required parameter 'timestamp' when calling PaymentApi->SubmitSecondaryTransaction");
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling PaymentApi->SubmitSecondaryTransaction");
            // verify the required parameter 'secondaryTransaction' is set
            if (secondaryTransaction == null)
                throw new ApiException(400, "Missing required parameter 'secondaryTransaction' when calling PaymentApi->SubmitSecondaryTransaction");

            var localVarPath = "/payments/{transaction-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionId != null) localVarPathParams.Add("transaction-id", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientRequestId != null) localVarHeaderParams.Add("Client-Request-Id", this.Configuration.ApiClient.ParameterToString(clientRequestId)); // header parameter
            if (apiKey != null) localVarHeaderParams.Add("Api-Key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter
            if (timestamp != null) localVarHeaderParams.Add("Timestamp", this.Configuration.ApiClient.ParameterToString(timestamp)); // header parameter
            if (messageSignature != null) localVarHeaderParams.Add("Message-Signature", this.Configuration.ApiClient.ParameterToString(messageSignature)); // header parameter
            if (region != null) localVarHeaderParams.Add("Region", this.Configuration.ApiClient.ParameterToString(region)); // header parameter
            if (secondaryTransaction != null && secondaryTransaction.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(secondaryTransaction); // http body (model) parameter
            }
            else
            {
                localVarPostBody = secondaryTransaction; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                RestSharp.Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitSecondaryTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResponse)));
        }

        /// <summary>
        /// Retrieve the state of a transaction. Use this query to get the current state of an existing transaction.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="transactionId">Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId">An optional outlet ID for clients that support multiple stores in the same developer app. (optional)</param>
        /// <returns>TransactionResponse</returns>
        public TransactionResponse TransactionInquiry (string contentType, string clientRequestId, string apiKey, long timestamp, string transactionId, string messageSignature = default(string), string region = default(string), string storeId = default(string))
        {
             ApiResponse<TransactionResponse> localVarResponse = TransactionInquiryWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, transactionId, messageSignature, region, storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the state of a transaction. Use this query to get the current state of an existing transaction.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="transactionId">Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId">An optional outlet ID for clients that support multiple stores in the same developer app. (optional)</param>
        /// <returns>ApiResponse of TransactionResponse</returns>
        public ApiResponse<TransactionResponse> TransactionInquiryWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string transactionId, string messageSignature = default(string), string region = default(string), string storeId = default(string))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentApi->TransactionInquiry");
            // verify the required parameter 'clientRequestId' is set
            if (clientRequestId == null)
                throw new ApiException(400, "Missing required parameter 'clientRequestId' when calling PaymentApi->TransactionInquiry");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling PaymentApi->TransactionInquiry");
            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new ApiException(400, "Missing required parameter 'timestamp' when calling PaymentApi->TransactionInquiry");
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling PaymentApi->TransactionInquiry");

            var localVarPath = "/payments/{transaction-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionId != null) localVarPathParams.Add("transaction-id", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientRequestId != null) localVarHeaderParams.Add("Client-Request-Id", this.Configuration.ApiClient.ParameterToString(clientRequestId)); // header parameter
            if (apiKey != null) localVarHeaderParams.Add("Api-Key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter
            if (timestamp != null) localVarHeaderParams.Add("Timestamp", this.Configuration.ApiClient.ParameterToString(timestamp)); // header parameter
            if (messageSignature != null) localVarHeaderParams.Add("Message-Signature", this.Configuration.ApiClient.ParameterToString(messageSignature)); // header parameter
            if (region != null) localVarHeaderParams.Add("Region", this.Configuration.ApiClient.ParameterToString(region)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                RestSharp.Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionInquiry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResponse)));
        }

        /// <summary>
        /// Retrieve the state of a transaction. Use this query to get the current state of an existing transaction.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="transactionId">Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId">An optional outlet ID for clients that support multiple stores in the same developer app. (optional)</param>
        /// <returns>Task of TransactionResponse</returns>
        public async System.Threading.Tasks.Task<TransactionResponse> TransactionInquiryAsync (string contentType, string clientRequestId, string apiKey, long timestamp, string transactionId, string messageSignature = default(string), string region = default(string), string storeId = default(string))
        {
             ApiResponse<TransactionResponse> localVarResponse = await TransactionInquiryAsyncWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, transactionId, messageSignature, region, storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the state of a transaction. Use this query to get the current state of an existing transaction.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="transactionId">Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId">An optional outlet ID for clients that support multiple stores in the same developer app. (optional)</param>
        /// <returns>Task of ApiResponse (TransactionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionResponse>> TransactionInquiryAsyncWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string transactionId, string messageSignature = default(string), string region = default(string), string storeId = default(string))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentApi->TransactionInquiry");
            // verify the required parameter 'clientRequestId' is set
            if (clientRequestId == null)
                throw new ApiException(400, "Missing required parameter 'clientRequestId' when calling PaymentApi->TransactionInquiry");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling PaymentApi->TransactionInquiry");
            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new ApiException(400, "Missing required parameter 'timestamp' when calling PaymentApi->TransactionInquiry");
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling PaymentApi->TransactionInquiry");

            var localVarPath = "/payments/{transaction-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionId != null) localVarPathParams.Add("transaction-id", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter
            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storeId", storeId)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientRequestId != null) localVarHeaderParams.Add("Client-Request-Id", this.Configuration.ApiClient.ParameterToString(clientRequestId)); // header parameter
            if (apiKey != null) localVarHeaderParams.Add("Api-Key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter
            if (timestamp != null) localVarHeaderParams.Add("Timestamp", this.Configuration.ApiClient.ParameterToString(timestamp)); // header parameter
            if (messageSignature != null) localVarHeaderParams.Add("Message-Signature", this.Configuration.ApiClient.ParameterToString(messageSignature)); // header parameter
            if (region != null) localVarHeaderParams.Add("Region", this.Configuration.ApiClient.ParameterToString(region)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                RestSharp.Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionInquiry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResponse)));
        }

    }
}
